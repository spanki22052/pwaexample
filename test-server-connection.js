// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
// –ó–∞–ø—É—Å–∫: node test-server-connection.js

const config = {
  development: {
    API_URL: "http://localhost:3001",
  },
  production: {
    API_URL: "http://109.205.212.29:3001",
  },
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
const env = process.argv[2] || "development";
const currentConfig = config[env];

console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É (${env})`);
console.log(`üì° URL: ${currentConfig.API_URL}`);

async function testConnection() {
  try {
    console.log("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

    const response = await fetch(`${currentConfig.API_URL}/api/files`);

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(
      `üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`,
      Object.fromEntries(response.headers.entries())
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.files?.length || 0}`);

    if (data.files && data.files.length > 0) {
      console.log("üìÑ –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞:", data.files[0]);
    }

    console.log("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç!");
  } catch (error) {
    console.error("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);

    if (error.message.includes("fetch is not defined")) {
      console.log("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ node-fetch: npm install node-fetch");
    } else if (error.message.includes("ECONNREFUSED")) {
      console.log("üí° –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node server.js");
    } else if (error.message.includes("getaddrinfo ENOTFOUND")) {
      console.log("üí° –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞");
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fetch
if (typeof fetch === "undefined") {
  console.log("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º node-fetch...");
  import("node-fetch")
    .then(({ default: fetch }) => {
      global.fetch = fetch;
      testConnection();
    })
    .catch(() => {
      console.log(
        "‚ùå node-fetch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-fetch"
      );
    });
} else {
  testConnection();
}
