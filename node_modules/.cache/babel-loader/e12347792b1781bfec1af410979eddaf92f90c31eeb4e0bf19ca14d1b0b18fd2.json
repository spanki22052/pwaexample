{"ast":null,"code":"var _jsxFileName = \"/Users/tigrotigro/Projects/Hakaton/pwaexample/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PhotoUploader from \"./components/PhotoUploader\";\nimport PhotoGrid from \"./components/PhotoGrid\";\nimport NetworkStatus from \"./components/NetworkStatus\";\nimport { photoService } from \"./services/PhotoService\";\nimport { checkAllPermissions, displayPermissionsInfo, isHTTPS } from \"./utils/permissions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n  const loadPhotos = useCallback(async (withSync = false) => {\n    try {\n      setIsLoading(true);\n      let savedPhotos;\n      if (withSync) {\n        // Загружаем с синхронизацией с сервером\n        savedPhotos = await photoService.getAllPhotosWithSync();\n        console.log(\"Фотографии загружены с синхронизацией с сервером\");\n      } else {\n        // Обычная загрузка из локальной базы\n        savedPhotos = await photoService.getAllPhotos();\n      }\n      setPhotos(savedPhotos);\n      console.log(`Загружено ${savedPhotos.length} фотографий`);\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const retryPendingUploads = useCallback(async () => {\n    try {\n      // Получаем актуальные фотографии из базы данных вместо state\n      const allPhotos = await photoService.getAllPhotos();\n      const pendingPhotos = allPhotos.filter(photo => photo.status === \"pending\");\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  }, [loadPhotos]);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    // При первом запуске загружаем с синхронизацией с сервером\n    loadPhotos(true);\n\n    // Проверяем разрешения при запуске приложения\n    const checkPermissions = async () => {\n      try {\n        const permissions = await checkAllPermissions();\n        displayPermissionsInfo(permissions);\n\n        // Предупреждаем если не HTTPS (кроме localhost)\n        if (!isHTTPS() && window.location.hostname !== \"localhost\") {\n          console.warn(\"⚠️ Приложение работает по HTTP. Для полной функциональности камеры необходим HTTPS.\");\n        }\n      } catch (error) {\n        console.error(\"Ошибка при проверке разрешений:\", error);\n      }\n    };\n    checkPermissions();\n  }, [loadPhotos]);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, retryPendingUploads]);\n  const handlePhotoUpload = async file => {\n    try {\n      const photoData = {\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n        // Более уникальный ID\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: \"pending\",\n        createdAt: new Date().toISOString()\n      };\n\n      // Сохраняем в IndexedDB\n      await photoService.savePhoto(photoData);\n\n      // Обновляем состояние\n      setPhotos(prev => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        try {\n          await photoService.uploadPhoto(photoData);\n          await loadPhotos(); // Обновляем статус\n        } catch (uploadError) {\n          console.error(\"Ошибка загрузки на сервер:\", uploadError);\n          // Не блокируем интерфейс, просто логируем ошибку\n          await loadPhotos(); // Обновляем статус с ошибкой\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n    }\n  };\n  const handleRetryUpload = async photoId => {\n    try {\n      const photo = photos.find(p => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  };\n  const handleDeletePhoto = async photoId => {\n    try {\n      await photoService.deletePhoto(photoId);\n      // Обновляем состояние, удаляя фотографию из списка\n      setPhotos(prev => prev.filter(photo => photo.id !== photoId));\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      alert(\"Не удалось удалить фотографию. Попробуйте еще раз.\");\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0444\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u0439...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDCF8 Photo Upload PWA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NetworkStatus, {\n        isOnline: isOnline\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoUploader, {\n      onPhotoUpload: handlePhotoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoGrid, {\n      photos: photos,\n      onRetryUpload: handleRetryUpload,\n      onDeletePhoto: handleDeletePhoto,\n      isOnline: isOnline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Cl+EEf7FuI65eF9EDMQ52P+6h8k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","PhotoUploader","PhotoGrid","NetworkStatus","photoService","checkAllPermissions","displayPermissionsInfo","isHTTPS","jsxDEV","_jsxDEV","App","_s","photos","setPhotos","isOnline","setIsOnline","navigator","onLine","isLoading","setIsLoading","isSyncing","setIsSyncing","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadPhotos","withSync","savedPhotos","getAllPhotosWithSync","console","log","getAllPhotos","length","error","retryPendingUploads","allPhotos","pendingPhotos","filter","photo","status","uploadPhoto","checkPermissions","permissions","location","hostname","warn","handlePhotoUpload","file","photoData","id","Date","now","toString","Math","random","substr","name","size","createdAt","toISOString","savePhoto","prev","uploadError","handleRetryUpload","photoId","find","p","handleDeletePhoto","deletePhoto","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPhotoUpload","onRetryUpload","onDeletePhoto","_c","$RefreshReg$"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PhotoUploader from \"./components/PhotoUploader\";\nimport PhotoGrid from \"./components/PhotoGrid\";\nimport NetworkStatus from \"./components/NetworkStatus\";\nimport { photoService } from \"./services/PhotoService\";\nimport {\n  checkAllPermissions,\n  displayPermissionsInfo,\n  isHTTPS,\n} from \"./utils/permissions\";\n\nfunction App() {\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSyncing, setIsSyncing] = useState(false);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  const loadPhotos = useCallback(async (withSync = false) => {\n    try {\n      setIsLoading(true);\n      let savedPhotos;\n\n      if (withSync) {\n        // Загружаем с синхронизацией с сервером\n        savedPhotos = await photoService.getAllPhotosWithSync();\n        console.log(\"Фотографии загружены с синхронизацией с сервером\");\n      } else {\n        // Обычная загрузка из локальной базы\n        savedPhotos = await photoService.getAllPhotos();\n      }\n\n      setPhotos(savedPhotos);\n      console.log(`Загружено ${savedPhotos.length} фотографий`);\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const retryPendingUploads = useCallback(async () => {\n    try {\n      // Получаем актуальные фотографии из базы данных вместо state\n      const allPhotos = await photoService.getAllPhotos();\n      const pendingPhotos = allPhotos.filter(\n        (photo) => photo.status === \"pending\"\n      );\n\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  }, [loadPhotos]);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    // При первом запуске загружаем с синхронизацией с сервером\n    loadPhotos(true);\n\n    // Проверяем разрешения при запуске приложения\n    const checkPermissions = async () => {\n      try {\n        const permissions = await checkAllPermissions();\n        displayPermissionsInfo(permissions);\n\n        // Предупреждаем если не HTTPS (кроме localhost)\n        if (!isHTTPS() && window.location.hostname !== \"localhost\") {\n          console.warn(\n            \"⚠️ Приложение работает по HTTP. Для полной функциональности камеры необходим HTTPS.\"\n          );\n        }\n      } catch (error) {\n        console.error(\"Ошибка при проверке разрешений:\", error);\n      }\n    };\n\n    checkPermissions();\n  }, [loadPhotos]);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, retryPendingUploads]);\n\n  const handlePhotoUpload = async (file) => {\n    try {\n      const photoData = {\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9), // Более уникальный ID\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n      };\n\n      // Сохраняем в IndexedDB\n      await photoService.savePhoto(photoData);\n\n      // Обновляем состояние\n      setPhotos((prev) => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        try {\n          await photoService.uploadPhoto(photoData);\n          await loadPhotos(); // Обновляем статус\n        } catch (uploadError) {\n          console.error(\"Ошибка загрузки на сервер:\", uploadError);\n          // Не блокируем интерфейс, просто логируем ошибку\n          await loadPhotos(); // Обновляем статус с ошибкой\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n    }\n  };\n\n  const handleRetryUpload = async (photoId) => {\n    try {\n      const photo = photos.find((p) => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  };\n\n  const handleDeletePhoto = async (photoId) => {\n    try {\n      await photoService.deletePhoto(photoId);\n      // Обновляем состояние, удаляя фотографию из списка\n      setPhotos((prev) => prev.filter((photo) => photo.id !== photoId));\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      alert(\"Не удалось удалить фотографию. Попробуйте еще раз.\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container\">\n        <div className=\"loading\">Загрузка фотографий...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <h1>📸 Photo Upload PWA</h1>\n        <NetworkStatus isOnline={isOnline} />\n      </header>\n\n      <PhotoUploader onPhotoUpload={handlePhotoUpload} />\n\n      <PhotoGrid\n        photos={photos}\n        onRetryUpload={handleRetryUpload}\n        onDeletePhoto={handleDeletePhoto}\n        isOnline={isOnline}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}