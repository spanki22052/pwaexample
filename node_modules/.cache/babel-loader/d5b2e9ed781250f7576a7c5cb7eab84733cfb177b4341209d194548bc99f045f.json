{"ast":null,"code":"import _objectSpread from\"/Users/tigrotigro/Projects/Hakaton/pwaexample/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{openDB}from\"idb\";import config from\"../config\";const DB_NAME=\"PhotoPWA\";const DB_VERSION=1;const STORE_NAME=\"photos\";class PhotoService{constructor(){this.db=null;this.initDB();}async initDB(){try{this.db=await openDB(DB_NAME,DB_VERSION,{upgrade(db){if(!db.objectStoreNames.contains(STORE_NAME)){db.createObjectStore(STORE_NAME,{keyPath:\"id\"});}}});}catch(error){console.error(\"Ошибка инициализации IndexedDB:\",error);}}async savePhoto(photoData){try{if(!this.db)await this.initDB();// Конвертируем File в ArrayBuffer для хранения\nconst arrayBuffer=await photoData.file.arrayBuffer();const photoToSave=_objectSpread(_objectSpread({},photoData),{},{fileData:arrayBuffer,fileType:photoData.file.type,fileName:photoData.file.name});// Удаляем оригинальный File объект\ndelete photoToSave.file;await this.db.put(STORE_NAME,photoToSave);return photoToSave;}catch(error){console.error(\"Ошибка сохранения фотографии:\",error);throw error;}}async getAllPhotos(){try{if(!this.db)await this.initDB();// Получаем локальные фотографии из IndexedDB\nconst localPhotos=await this.db.getAll(STORE_NAME);// Получаем серверные фотографии (только если онлайн)\nlet serverPhotos=[];try{if(navigator.onLine){serverPhotos=await this.loadPhotosFromServer();}}catch(error){console.warn(\"Не удалось загрузить серверные фото:\",error);serverPhotos=[];}// Создаем Set ID локальных фотографий для быстрой проверки\nconst localPhotoIds=new Set(localPhotos.map(p=>p.id));// Объединяем локальные и серверные фотографии\nconst allPhotos=[...localPhotos];// Добавляем серверные фотографии, которых нет в локальной базе\nfor(const serverPhoto of serverPhotos){if(!localPhotoIds.has(serverPhoto.id)){allPhotos.push(serverPhoto);}}// Восстанавливаем File объекты из ArrayBuffer и устанавливаем правильные URL\nreturn allPhotos.map(photo=>{// Если фото загружено на сервер, используем серверный URL\nif(photo.status===\"uploaded\"&&photo.serverFilename){return _objectSpread(_objectSpread({},photo),{},{url:\"\".concat(config.API_URL,\"/uploads/\").concat(photo.serverFilename)// Не создаем File объект для загруженных фото, он не нужен\n});}// Для серверных фото, которых нет в локальной базе\nif(photo.url&&photo.url.startsWith(\"\".concat(config.API_URL,\"/uploads/\"))){return photo;}// Для локальных фото создаем File объект\nif(photo.fileData){const file=new File([photo.fileData],photo.fileName,{type:photo.fileType});return _objectSpread(_objectSpread({},photo),{},{file:file});}return photo;}).sort((a,b)=>new Date(b.uploadedAt||b.createdAt)-new Date(a.uploadedAt||a.createdAt));}catch(error){console.error(\"Ошибка загрузки фотографий:\",error);return[];}}async updatePhotoStatus(photoId,status){let error=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let serverFilename=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;try{if(!this.db){await this.initDB();}const photo=await this.db.get(STORE_NAME,photoId);if(photo){photo.status=status;if(error){photo.error=error;}if(serverFilename){photo.serverFilename=serverFilename;}await this.db.put(STORE_NAME,photo);}}catch(error){console.error(\"Ошибка обновления статуса фотографии:\",error);}}async deletePhoto(photoId){try{if(!this.db){await this.initDB();}// Проверяем, является ли это серверной фотографией\nif(photoId.startsWith(\"server-\")){// Для серверных фотографий удаляем только с сервера\nconst serverFilename=photoId.replace(\"server-\",\"\");try{const response=await fetch(\"\".concat(config.API_URL,\"/api/files/\").concat(serverFilename),{method:\"DELETE\"});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}console.log(\"\\u0424\\u0430\\u0439\\u043B \".concat(serverFilename,\" \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0443\\u0434\\u0430\\u043B\\u0435\\u043D \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430\"));}catch(serverError){console.error(\"Ошибка при удалении файла с сервера:\",serverError);throw serverError;}return;}// Получаем информацию о локальной фотографии перед удалением\nconst photo=await this.db.get(STORE_NAME,photoId);// Удаляем файл с сервера, если он был загружен\nif(photo&&photo.serverFilename){try{const response=await fetch(\"\".concat(config.API_URL,\"/api/files/\").concat(photo.serverFilename),{method:\"DELETE\"});if(!response.ok){console.warn(\"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0444\\u0430\\u0439\\u043B \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \".concat(photo.serverFilename));}else{console.log(\"\\u0424\\u0430\\u0439\\u043B \".concat(photo.serverFilename,\" \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0443\\u0434\\u0430\\u043B\\u0435\\u043D \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430\"));}}catch(serverError){console.warn(\"Ошибка при удалении файла с сервера:\",serverError);// Продолжаем удаление из локальной БД даже если сервер недоступен\n}}// Удаляем из локальной базы данных\nawait this.db.delete(STORE_NAME,photoId);}catch(error){console.error(\"Ошибка удаления фотографии:\",error);throw error;}}async uploadPhoto(photoData){try{var _result$file;// Обновляем статус на \"загрузка\"\nawait this.updatePhotoStatus(photoData.id,\"uploading\");// Создаем FormData для отправки файла\nconst formData=new FormData();formData.append(\"photo\",photoData.file);formData.append(\"id\",photoData.id);formData.append(\"name\",photoData.name);formData.append(\"createdAt\",photoData.createdAt);// Отправляем на сервер\n// Если сервер не запущен, используем httpbin.org для демонстрации\nlet apiUrl=\"\".concat(config.API_URL,\"/api/upload\");// Проверяем, доступен ли сервер\ntry{await fetch(\"\".concat(config.API_URL,\"/api/files\"),{method:\"HEAD\"});}catch(_unused){// Если сервер недоступен, используем httpbin\napiUrl=\"https://httpbin.org/post\";}const response=await fetch(apiUrl,{method:\"POST\",body:formData});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();// Сохраняем имя файла на сервере для последующего удаления\nconst serverFilename=((_result$file=result.file)===null||_result$file===void 0?void 0:_result$file.filename)||null;await this.updatePhotoStatus(photoData.id,\"uploaded\",null,serverFilename);return{id:photoData.id,url:result.url||\"https://example.com/photos/\".concat(photoData.id,\".jpg\"),uploadedAt:new Date().toISOString(),serverResponse:result,serverFilename:serverFilename};}catch(error){console.error(\"Ошибка загрузки фотографии:\",error);// Обновляем статус на ошибку\nawait this.updatePhotoStatus(photoData.id,\"error\",error.message);throw error;}}// Загружает список фотографий с сервера\nasync loadPhotosFromServer(){try{const apiUrl=\"\".concat(config.API_URL,\"/api/files\");console.log(\"Загружаем фотографии с сервера:\",apiUrl);const response=await fetch(apiUrl,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();const serverPhotos=data.files||[];console.log(\"\\u041D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \".concat(serverPhotos.length,\" \\u0444\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u0439 \\u043D\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0435\"));// Преобразуем серверные фотографии в формат приложения\nconst transformedPhotos=serverPhotos.map(serverPhoto=>({id:\"server_\".concat(serverPhoto.filename),// Уникальный ID для серверных фото\nname:serverPhoto.filename,size:serverPhoto.size,status:\"uploaded\",createdAt:serverPhoto.uploadedAt,serverFilename:serverPhoto.filename,url:\"\".concat(config.API_URL).concat(serverPhoto.url),isFromServer:true// Флаг что это фото с сервера\n}));return transformedPhotos;}catch(error){console.error(\"Ошибка загрузки фотографий с сервера:\",error);return[];}}// Синхронизирует локальные фото с серверными\nasync syncWithServer(){let forceReload=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;try{if(!this.db)await this.initDB();// Загружаем фотографии с сервера\nconst serverPhotos=await this.loadPhotosFromServer();// Получаем локальные фотографии\nconst localPhotos=await this.db.getAll(STORE_NAME);// Создаем Set из имен файлов на сервере для быстрого поиска\nconst serverFilenames=new Set(serverPhotos.map(photo=>photo.serverFilename));// Обновляем статус локальных фото, которые есть на сервере\nfor(const localPhoto of localPhotos){if(localPhoto.serverFilename&&serverFilenames.has(localPhoto.serverFilename)){if(localPhoto.status!==\"uploaded\"){localPhoto.status=\"uploaded\";await this.db.put(STORE_NAME,localPhoto);}}}// Добавляем серверные фото, которых нет в локальной базе\nconst localServerFilenames=new Set(localPhotos.filter(photo=>photo.serverFilename).map(photo=>photo.serverFilename));for(const serverPhoto of serverPhotos){if(!localServerFilenames.has(serverPhoto.serverFilename)||forceReload){// Сохраняем серверное фото в локальную базу\n// При forceReload обновляем даже существующие серверные фото\nawait this.db.put(STORE_NAME,serverPhoto);if(forceReload){console.log(\"\\uD83D\\uDD04 \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u043E \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u043E\\u0435 \\u0444\\u043E\\u0442\\u043E: \".concat(serverPhoto.name));}}}console.log(\"Синхронизация с сервером завершена\");return true;}catch(error){console.error(\"Ошибка синхронизации с сервером:\",error);return false;}}// Получает все фотографии с учетом синхронизации с сервером\nasync getAllPhotosWithSync(){try{console.log(\"🔄 Начинаем синхронизацию с сервером...\");// Получаем локальные фото до синхронизации\nconst localPhotosBeforeSync=await this.getAllPhotos();console.log(\"\\uD83D\\uDCF1 \\u041B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0445 \\u0444\\u043E\\u0442\\u043E \\u0434\\u043E \\u0441\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438: \".concat(localPhotosBeforeSync.length));// Синхронизируемся с сервером\nawait this.syncWithServer();// Получаем все фотографии после синхронизации\nconst allPhotosAfterSync=await this.getAllPhotos();console.log(\"\\uD83D\\uDCCA \\u0412\\u0441\\u0435\\u0433\\u043E \\u0444\\u043E\\u0442\\u043E \\u043F\\u043E\\u0441\\u043B\\u0435 \\u0441\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438: \".concat(allPhotosAfterSync.length));const serverPhotos=allPhotosAfterSync.filter(photo=>photo.isFromServer);const localPhotos=allPhotosAfterSync.filter(photo=>!photo.isFromServer);console.log(\"\\uD83C\\uDF10 \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440\\u043D\\u044B\\u0445 \\u0444\\u043E\\u0442\\u043E: \".concat(serverPhotos.length));console.log(\"\\uD83D\\uDCF1 \\u041B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0445 \\u0444\\u043E\\u0442\\u043E: \".concat(localPhotos.length));console.log(\"✅ Синхронизация завершена успешно!\");return allPhotosAfterSync;}catch(error){console.error(\"❌ Ошибка получения фотографий с синхронизацией:\",error);// Если синхронизация не удалась, возвращаем только локальные фото\nconst localPhotos=await this.getAllPhotos();console.log(\"\\uD83D\\uDCF1 \\u0412\\u043E\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u043C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u0444\\u043E\\u0442\\u043E: \".concat(localPhotos.length));return localPhotos;}}// Метод для очистки старых фотографий (опционально)\nasync cleanupOldPhotos(){let daysOld=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;try{if(!this.db){await this.initDB();}const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-daysOld);const photos=await this.db.getAll(STORE_NAME);const photosToDelete=photos.filter(photo=>{const photoDate=new Date(photo.createdAt);return photoDate<cutoffDate&&photo.status===\"uploaded\";});for(const photo of photosToDelete){await this.db.delete(STORE_NAME,photo.id);}return photosToDelete.length;}catch(error){console.error(\"Ошибка очистки старых фотографий:\",error);return 0;}}}export const photoService=new PhotoService();export{PhotoService};","map":{"version":3,"names":["openDB","config","DB_NAME","DB_VERSION","STORE_NAME","PhotoService","constructor","db","initDB","upgrade","objectStoreNames","contains","createObjectStore","keyPath","error","console","savePhoto","photoData","arrayBuffer","file","photoToSave","_objectSpread","fileData","fileType","type","fileName","name","put","getAllPhotos","localPhotos","getAll","serverPhotos","navigator","onLine","loadPhotosFromServer","warn","localPhotoIds","Set","map","p","id","allPhotos","serverPhoto","has","push","photo","status","serverFilename","url","concat","API_URL","startsWith","File","sort","a","b","Date","uploadedAt","createdAt","updatePhotoStatus","photoId","arguments","length","undefined","get","deletePhoto","replace","response","fetch","method","ok","Error","log","serverError","delete","uploadPhoto","_result$file","formData","FormData","append","apiUrl","_unused","body","result","json","filename","toISOString","serverResponse","message","headers","data","files","transformedPhotos","size","isFromServer","syncWithServer","forceReload","serverFilenames","localPhoto","localServerFilenames","filter","getAllPhotosWithSync","localPhotosBeforeSync","allPhotosAfterSync","cleanupOldPhotos","daysOld","cutoffDate","setDate","getDate","photos","photosToDelete","photoDate","photoService"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/services/PhotoService.js"],"sourcesContent":["import { openDB } from \"idb\";\nimport config from \"../config\";\n\nconst DB_NAME = \"PhotoPWA\";\nconst DB_VERSION = 1;\nconst STORE_NAME = \"photos\";\n\nclass PhotoService {\n  constructor() {\n    this.db = null;\n    this.initDB();\n  }\n\n  async initDB() {\n    try {\n      this.db = await openDB(DB_NAME, DB_VERSION, {\n        upgrade(db) {\n          if (!db.objectStoreNames.contains(STORE_NAME)) {\n            db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n          }\n        },\n      });\n    } catch (error) {\n      console.error(\"Ошибка инициализации IndexedDB:\", error);\n    }\n  }\n\n  async savePhoto(photoData) {\n    try {\n      if (!this.db) await this.initDB();\n\n      // Конвертируем File в ArrayBuffer для хранения\n      const arrayBuffer = await photoData.file.arrayBuffer();\n      const photoToSave = {\n        ...photoData,\n        fileData: arrayBuffer,\n        fileType: photoData.file.type,\n        fileName: photoData.file.name,\n      };\n\n      // Удаляем оригинальный File объект\n      delete photoToSave.file;\n\n      await this.db.put(STORE_NAME, photoToSave);\n      return photoToSave;\n    } catch (error) {\n      console.error(\"Ошибка сохранения фотографии:\", error);\n      throw error;\n    }\n  }\n\n  async getAllPhotos() {\n    try {\n      if (!this.db) await this.initDB();\n\n      // Получаем локальные фотографии из IndexedDB\n      const localPhotos = await this.db.getAll(STORE_NAME);\n\n      // Получаем серверные фотографии (только если онлайн)\n      let serverPhotos = [];\n      try {\n        if (navigator.onLine) {\n          serverPhotos = await this.loadPhotosFromServer();\n        }\n      } catch (error) {\n        console.warn(\"Не удалось загрузить серверные фото:\", error);\n        serverPhotos = [];\n      }\n\n      // Создаем Set ID локальных фотографий для быстрой проверки\n      const localPhotoIds = new Set(localPhotos.map((p) => p.id));\n\n      // Объединяем локальные и серверные фотографии\n      const allPhotos = [...localPhotos];\n\n      // Добавляем серверные фотографии, которых нет в локальной базе\n      for (const serverPhoto of serverPhotos) {\n        if (!localPhotoIds.has(serverPhoto.id)) {\n          allPhotos.push(serverPhoto);\n        }\n      }\n\n      // Восстанавливаем File объекты из ArrayBuffer и устанавливаем правильные URL\n      return allPhotos\n        .map((photo) => {\n          // Если фото загружено на сервер, используем серверный URL\n          if (photo.status === \"uploaded\" && photo.serverFilename) {\n            return {\n              ...photo,\n              url: `${config.API_URL}/uploads/${photo.serverFilename}`,\n              // Не создаем File объект для загруженных фото, он не нужен\n            };\n          }\n\n          // Для серверных фото, которых нет в локальной базе\n          if (photo.url && photo.url.startsWith(`${config.API_URL}/uploads/`)) {\n            return photo;\n          }\n\n          // Для локальных фото создаем File объект\n          if (photo.fileData) {\n            const file = new File([photo.fileData], photo.fileName, {\n              type: photo.fileType,\n            });\n            return {\n              ...photo,\n              file: file,\n            };\n          }\n\n          return photo;\n        })\n        .sort(\n          (a, b) =>\n            new Date(b.uploadedAt || b.createdAt) -\n            new Date(a.uploadedAt || a.createdAt)\n        );\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n      return [];\n    }\n  }\n\n  async updatePhotoStatus(\n    photoId,\n    status,\n    error = null,\n    serverFilename = null\n  ) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      const photo = await this.db.get(STORE_NAME, photoId);\n      if (photo) {\n        photo.status = status;\n        if (error) {\n          photo.error = error;\n        }\n        if (serverFilename) {\n          photo.serverFilename = serverFilename;\n        }\n        await this.db.put(STORE_NAME, photo);\n      }\n    } catch (error) {\n      console.error(\"Ошибка обновления статуса фотографии:\", error);\n    }\n  }\n\n  async deletePhoto(photoId) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      // Проверяем, является ли это серверной фотографией\n      if (photoId.startsWith(\"server-\")) {\n        // Для серверных фотографий удаляем только с сервера\n        const serverFilename = photoId.replace(\"server-\", \"\");\n        try {\n          const response = await fetch(\n            `${config.API_URL}/api/files/${serverFilename}`,\n            {\n              method: \"DELETE\",\n            }\n          );\n\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n\n          console.log(`Файл ${serverFilename} успешно удален с сервера`);\n        } catch (serverError) {\n          console.error(\"Ошибка при удалении файла с сервера:\", serverError);\n          throw serverError;\n        }\n        return;\n      }\n\n      // Получаем информацию о локальной фотографии перед удалением\n      const photo = await this.db.get(STORE_NAME, photoId);\n\n      // Удаляем файл с сервера, если он был загружен\n      if (photo && photo.serverFilename) {\n        try {\n          const response = await fetch(\n            `${config.API_URL}/api/files/${photo.serverFilename}`,\n            {\n              method: \"DELETE\",\n            }\n          );\n\n          if (!response.ok) {\n            console.warn(\n              `Не удалось удалить файл с сервера: ${photo.serverFilename}`\n            );\n          } else {\n            console.log(\n              `Файл ${photo.serverFilename} успешно удален с сервера`\n            );\n          }\n        } catch (serverError) {\n          console.warn(\"Ошибка при удалении файла с сервера:\", serverError);\n          // Продолжаем удаление из локальной БД даже если сервер недоступен\n        }\n      }\n\n      // Удаляем из локальной базы данных\n      await this.db.delete(STORE_NAME, photoId);\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      throw error;\n    }\n  }\n\n  async uploadPhoto(photoData) {\n    try {\n      // Обновляем статус на \"загрузка\"\n      await this.updatePhotoStatus(photoData.id, \"uploading\");\n\n      // Создаем FormData для отправки файла\n      const formData = new FormData();\n      formData.append(\"photo\", photoData.file);\n      formData.append(\"id\", photoData.id);\n      formData.append(\"name\", photoData.name);\n      formData.append(\"createdAt\", photoData.createdAt);\n\n      // Отправляем на сервер\n      // Если сервер не запущен, используем httpbin.org для демонстрации\n      let apiUrl = `${config.API_URL}/api/upload`;\n\n      // Проверяем, доступен ли сервер\n      try {\n        await fetch(`${config.API_URL}/api/files`, { method: \"HEAD\" });\n      } catch {\n        // Если сервер недоступен, используем httpbin\n        apiUrl = \"https://httpbin.org/post\";\n      }\n\n      const response = await fetch(apiUrl, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      // Сохраняем имя файла на сервере для последующего удаления\n      const serverFilename = result.file?.filename || null;\n      await this.updatePhotoStatus(\n        photoData.id,\n        \"uploaded\",\n        null,\n        serverFilename\n      );\n\n      return {\n        id: photoData.id,\n        url: result.url || `https://example.com/photos/${photoData.id}.jpg`,\n        uploadedAt: new Date().toISOString(),\n        serverResponse: result,\n        serverFilename: serverFilename,\n      };\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n\n      // Обновляем статус на ошибку\n      await this.updatePhotoStatus(photoData.id, \"error\", error.message);\n\n      throw error;\n    }\n  }\n\n  // Загружает список фотографий с сервера\n  async loadPhotosFromServer() {\n    try {\n      const apiUrl = `${config.API_URL}/api/files`;\n      console.log(\"Загружаем фотографии с сервера:\", apiUrl);\n\n      const response = await fetch(apiUrl, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const serverPhotos = data.files || [];\n\n      console.log(`Найдено ${serverPhotos.length} фотографий на сервере`);\n\n      // Преобразуем серверные фотографии в формат приложения\n      const transformedPhotos = serverPhotos.map((serverPhoto) => ({\n        id: `server_${serverPhoto.filename}`, // Уникальный ID для серверных фото\n        name: serverPhoto.filename,\n        size: serverPhoto.size,\n        status: \"uploaded\",\n        createdAt: serverPhoto.uploadedAt,\n        serverFilename: serverPhoto.filename,\n        url: `${config.API_URL}${serverPhoto.url}`,\n        isFromServer: true, // Флаг что это фото с сервера\n      }));\n\n      return transformedPhotos;\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий с сервера:\", error);\n      return [];\n    }\n  }\n\n  // Синхронизирует локальные фото с серверными\n  async syncWithServer(forceReload = false) {\n    try {\n      if (!this.db) await this.initDB();\n\n      // Загружаем фотографии с сервера\n      const serverPhotos = await this.loadPhotosFromServer();\n\n      // Получаем локальные фотографии\n      const localPhotos = await this.db.getAll(STORE_NAME);\n\n      // Создаем Set из имен файлов на сервере для быстрого поиска\n      const serverFilenames = new Set(\n        serverPhotos.map((photo) => photo.serverFilename)\n      );\n\n      // Обновляем статус локальных фото, которые есть на сервере\n      for (const localPhoto of localPhotos) {\n        if (\n          localPhoto.serverFilename &&\n          serverFilenames.has(localPhoto.serverFilename)\n        ) {\n          if (localPhoto.status !== \"uploaded\") {\n            localPhoto.status = \"uploaded\";\n            await this.db.put(STORE_NAME, localPhoto);\n          }\n        }\n      }\n\n      // Добавляем серверные фото, которых нет в локальной базе\n      const localServerFilenames = new Set(\n        localPhotos\n          .filter((photo) => photo.serverFilename)\n          .map((photo) => photo.serverFilename)\n      );\n\n      for (const serverPhoto of serverPhotos) {\n        if (\n          !localServerFilenames.has(serverPhoto.serverFilename) ||\n          forceReload\n        ) {\n          // Сохраняем серверное фото в локальную базу\n          // При forceReload обновляем даже существующие серверные фото\n          await this.db.put(STORE_NAME, serverPhoto);\n          if (forceReload) {\n            console.log(`🔄 Обновлено серверное фото: ${serverPhoto.name}`);\n          }\n        }\n      }\n\n      console.log(\"Синхронизация с сервером завершена\");\n      return true;\n    } catch (error) {\n      console.error(\"Ошибка синхронизации с сервером:\", error);\n      return false;\n    }\n  }\n\n  // Получает все фотографии с учетом синхронизации с сервером\n  async getAllPhotosWithSync() {\n    try {\n      console.log(\"🔄 Начинаем синхронизацию с сервером...\");\n\n      // Получаем локальные фото до синхронизации\n      const localPhotosBeforeSync = await this.getAllPhotos();\n      console.log(\n        `📱 Локальных фото до синхронизации: ${localPhotosBeforeSync.length}`\n      );\n\n      // Синхронизируемся с сервером\n      await this.syncWithServer();\n\n      // Получаем все фотографии после синхронизации\n      const allPhotosAfterSync = await this.getAllPhotos();\n      console.log(\n        `📊 Всего фото после синхронизации: ${allPhotosAfterSync.length}`\n      );\n\n      const serverPhotos = allPhotosAfterSync.filter(\n        (photo) => photo.isFromServer\n      );\n      const localPhotos = allPhotosAfterSync.filter(\n        (photo) => !photo.isFromServer\n      );\n\n      console.log(`🌐 Серверных фото: ${serverPhotos.length}`);\n      console.log(`📱 Локальных фото: ${localPhotos.length}`);\n      console.log(\"✅ Синхронизация завершена успешно!\");\n\n      return allPhotosAfterSync;\n    } catch (error) {\n      console.error(\"❌ Ошибка получения фотографий с синхронизацией:\", error);\n      // Если синхронизация не удалась, возвращаем только локальные фото\n      const localPhotos = await this.getAllPhotos();\n      console.log(`📱 Возвращаем только локальные фото: ${localPhotos.length}`);\n      return localPhotos;\n    }\n  }\n\n  // Метод для очистки старых фотографий (опционально)\n  async cleanupOldPhotos(daysOld = 30) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n      const photos = await this.db.getAll(STORE_NAME);\n      const photosToDelete = photos.filter((photo) => {\n        const photoDate = new Date(photo.createdAt);\n        return photoDate < cutoffDate && photo.status === \"uploaded\";\n      });\n\n      for (const photo of photosToDelete) {\n        await this.db.delete(STORE_NAME, photo.id);\n      }\n\n      return photosToDelete.length;\n    } catch (error) {\n      console.error(\"Ошибка очистки старых фотографий:\", error);\n      return 0;\n    }\n  }\n}\n\nexport const photoService = new PhotoService();\nexport { PhotoService };\n"],"mappings":"kIAAA,OAASA,MAAM,KAAQ,KAAK,CAC5B,MAAO,CAAAC,MAAM,KAAM,WAAW,CAE9B,KAAM,CAAAC,OAAO,CAAG,UAAU,CAC1B,KAAM,CAAAC,UAAU,CAAG,CAAC,CACpB,KAAM,CAAAC,UAAU,CAAG,QAAQ,CAE3B,KAAM,CAAAC,YAAa,CACjBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,EAAE,CAAG,IAAI,CACd,IAAI,CAACC,MAAM,CAAC,CAAC,CACf,CAEA,KAAM,CAAAA,MAAMA,CAAA,CAAG,CACb,GAAI,CACF,IAAI,CAACD,EAAE,CAAG,KAAM,CAAAP,MAAM,CAACE,OAAO,CAAEC,UAAU,CAAE,CAC1CM,OAAOA,CAACF,EAAE,CAAE,CACV,GAAI,CAACA,EAAE,CAACG,gBAAgB,CAACC,QAAQ,CAACP,UAAU,CAAC,CAAE,CAC7CG,EAAE,CAACK,iBAAiB,CAACR,UAAU,CAAE,CAAES,OAAO,CAAE,IAAK,CAAC,CAAC,CACrD,CACF,CACF,CAAC,CAAC,CACJ,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACzD,CACF,CAEA,KAAM,CAAAE,SAASA,CAACC,SAAS,CAAE,CACzB,GAAI,CACF,GAAI,CAAC,IAAI,CAACV,EAAE,CAAE,KAAM,KAAI,CAACC,MAAM,CAAC,CAAC,CAEjC;AACA,KAAM,CAAAU,WAAW,CAAG,KAAM,CAAAD,SAAS,CAACE,IAAI,CAACD,WAAW,CAAC,CAAC,CACtD,KAAM,CAAAE,WAAW,CAAAC,aAAA,CAAAA,aAAA,IACZJ,SAAS,MACZK,QAAQ,CAAEJ,WAAW,CACrBK,QAAQ,CAAEN,SAAS,CAACE,IAAI,CAACK,IAAI,CAC7BC,QAAQ,CAAER,SAAS,CAACE,IAAI,CAACO,IAAI,EAC9B,CAED;AACA,MAAO,CAAAN,WAAW,CAACD,IAAI,CAEvB,KAAM,KAAI,CAACZ,EAAE,CAACoB,GAAG,CAACvB,UAAU,CAAEgB,WAAW,CAAC,CAC1C,MAAO,CAAAA,WAAW,CACpB,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAAc,YAAYA,CAAA,CAAG,CACnB,GAAI,CACF,GAAI,CAAC,IAAI,CAACrB,EAAE,CAAE,KAAM,KAAI,CAACC,MAAM,CAAC,CAAC,CAEjC;AACA,KAAM,CAAAqB,WAAW,CAAG,KAAM,KAAI,CAACtB,EAAE,CAACuB,MAAM,CAAC1B,UAAU,CAAC,CAEpD;AACA,GAAI,CAAA2B,YAAY,CAAG,EAAE,CACrB,GAAI,CACF,GAAIC,SAAS,CAACC,MAAM,CAAE,CACpBF,YAAY,CAAG,KAAM,KAAI,CAACG,oBAAoB,CAAC,CAAC,CAClD,CACF,CAAE,MAAOpB,KAAK,CAAE,CACdC,OAAO,CAACoB,IAAI,CAAC,sCAAsC,CAAErB,KAAK,CAAC,CAC3DiB,YAAY,CAAG,EAAE,CACnB,CAEA;AACA,KAAM,CAAAK,aAAa,CAAG,GAAI,CAAAC,GAAG,CAACR,WAAW,CAACS,GAAG,CAAEC,CAAC,EAAKA,CAAC,CAACC,EAAE,CAAC,CAAC,CAE3D;AACA,KAAM,CAAAC,SAAS,CAAG,CAAC,GAAGZ,WAAW,CAAC,CAElC;AACA,IAAK,KAAM,CAAAa,WAAW,GAAI,CAAAX,YAAY,CAAE,CACtC,GAAI,CAACK,aAAa,CAACO,GAAG,CAACD,WAAW,CAACF,EAAE,CAAC,CAAE,CACtCC,SAAS,CAACG,IAAI,CAACF,WAAW,CAAC,CAC7B,CACF,CAEA;AACA,MAAO,CAAAD,SAAS,CACbH,GAAG,CAAEO,KAAK,EAAK,CACd;AACA,GAAIA,KAAK,CAACC,MAAM,GAAK,UAAU,EAAID,KAAK,CAACE,cAAc,CAAE,CACvD,OAAA1B,aAAA,CAAAA,aAAA,IACKwB,KAAK,MACRG,GAAG,IAAAC,MAAA,CAAKhD,MAAM,CAACiD,OAAO,cAAAD,MAAA,CAAYJ,KAAK,CAACE,cAAc,CACtD;AAAA,GAEJ,CAEA;AACA,GAAIF,KAAK,CAACG,GAAG,EAAIH,KAAK,CAACG,GAAG,CAACG,UAAU,IAAAF,MAAA,CAAIhD,MAAM,CAACiD,OAAO,aAAW,CAAC,CAAE,CACnE,MAAO,CAAAL,KAAK,CACd,CAEA;AACA,GAAIA,KAAK,CAACvB,QAAQ,CAAE,CAClB,KAAM,CAAAH,IAAI,CAAG,GAAI,CAAAiC,IAAI,CAAC,CAACP,KAAK,CAACvB,QAAQ,CAAC,CAAEuB,KAAK,CAACpB,QAAQ,CAAE,CACtDD,IAAI,CAAEqB,KAAK,CAACtB,QACd,CAAC,CAAC,CACF,OAAAF,aAAA,CAAAA,aAAA,IACKwB,KAAK,MACR1B,IAAI,CAAEA,IAAI,GAEd,CAEA,MAAO,CAAA0B,KAAK,CACd,CAAC,CAAC,CACDQ,IAAI,CACH,CAACC,CAAC,CAAEC,CAAC,GACH,GAAI,CAAAC,IAAI,CAACD,CAAC,CAACE,UAAU,EAAIF,CAAC,CAACG,SAAS,CAAC,CACrC,GAAI,CAAAF,IAAI,CAACF,CAAC,CAACG,UAAU,EAAIH,CAAC,CAACI,SAAS,CACxC,CAAC,CACL,CAAE,MAAO5C,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,EAAE,CACX,CACF,CAEA,KAAM,CAAA6C,iBAAiBA,CACrBC,OAAO,CACPd,MAAM,CAGN,IAFA,CAAAhC,KAAK,CAAA+C,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IACZ,CAAAd,cAAc,CAAAc,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAErB,GAAI,CACF,GAAI,CAAC,IAAI,CAACtD,EAAE,CAAE,CACZ,KAAM,KAAI,CAACC,MAAM,CAAC,CAAC,CACrB,CAEA,KAAM,CAAAqC,KAAK,CAAG,KAAM,KAAI,CAACtC,EAAE,CAACyD,GAAG,CAAC5D,UAAU,CAAEwD,OAAO,CAAC,CACpD,GAAIf,KAAK,CAAE,CACTA,KAAK,CAACC,MAAM,CAAGA,MAAM,CACrB,GAAIhC,KAAK,CAAE,CACT+B,KAAK,CAAC/B,KAAK,CAAGA,KAAK,CACrB,CACA,GAAIiC,cAAc,CAAE,CAClBF,KAAK,CAACE,cAAc,CAAGA,cAAc,CACvC,CACA,KAAM,KAAI,CAACxC,EAAE,CAACoB,GAAG,CAACvB,UAAU,CAAEyC,KAAK,CAAC,CACtC,CACF,CAAE,MAAO/B,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAAC,CAC/D,CACF,CAEA,KAAM,CAAAmD,WAAWA,CAACL,OAAO,CAAE,CACzB,GAAI,CACF,GAAI,CAAC,IAAI,CAACrD,EAAE,CAAE,CACZ,KAAM,KAAI,CAACC,MAAM,CAAC,CAAC,CACrB,CAEA;AACA,GAAIoD,OAAO,CAACT,UAAU,CAAC,SAAS,CAAC,CAAE,CACjC;AACA,KAAM,CAAAJ,cAAc,CAAGa,OAAO,CAACM,OAAO,CAAC,SAAS,CAAE,EAAE,CAAC,CACrD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAnB,MAAA,CACvBhD,MAAM,CAACiD,OAAO,gBAAAD,MAAA,CAAcF,cAAc,EAC7C,CACEsB,MAAM,CAAE,QACV,CACF,CAAC,CAED,GAAI,CAACF,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAtB,MAAA,CAAwBkB,QAAQ,CAACrB,MAAM,CAAE,CAAC,CAC3D,CAEA/B,OAAO,CAACyD,GAAG,6BAAAvB,MAAA,CAASF,cAAc,sIAA2B,CAAC,CAChE,CAAE,MAAO0B,WAAW,CAAE,CACpB1D,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAE2D,WAAW,CAAC,CAClE,KAAM,CAAAA,WAAW,CACnB,CACA,OACF,CAEA;AACA,KAAM,CAAA5B,KAAK,CAAG,KAAM,KAAI,CAACtC,EAAE,CAACyD,GAAG,CAAC5D,UAAU,CAAEwD,OAAO,CAAC,CAEpD;AACA,GAAIf,KAAK,EAAIA,KAAK,CAACE,cAAc,CAAE,CACjC,GAAI,CACF,KAAM,CAAAoB,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAnB,MAAA,CACvBhD,MAAM,CAACiD,OAAO,gBAAAD,MAAA,CAAcJ,KAAK,CAACE,cAAc,EACnD,CACEsB,MAAM,CAAE,QACV,CACF,CAAC,CAED,GAAI,CAACF,QAAQ,CAACG,EAAE,CAAE,CAChBvD,OAAO,CAACoB,IAAI,mLAAAc,MAAA,CAC4BJ,KAAK,CAACE,cAAc,CAC5D,CAAC,CACH,CAAC,IAAM,CACLhC,OAAO,CAACyD,GAAG,6BAAAvB,MAAA,CACDJ,KAAK,CAACE,cAAc,sIAC9B,CAAC,CACH,CACF,CAAE,MAAO0B,WAAW,CAAE,CACpB1D,OAAO,CAACoB,IAAI,CAAC,sCAAsC,CAAEsC,WAAW,CAAC,CACjE;AACF,CACF,CAEA;AACA,KAAM,KAAI,CAAClE,EAAE,CAACmE,MAAM,CAACtE,UAAU,CAAEwD,OAAO,CAAC,CAC3C,CAAE,MAAO9C,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,KAAM,CAAA6D,WAAWA,CAAC1D,SAAS,CAAE,CAC3B,GAAI,KAAA2D,YAAA,CACF;AACA,KAAM,KAAI,CAACjB,iBAAiB,CAAC1C,SAAS,CAACuB,EAAE,CAAE,WAAW,CAAC,CAEvD;AACA,KAAM,CAAAqC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,CAAE9D,SAAS,CAACE,IAAI,CAAC,CACxC0D,QAAQ,CAACE,MAAM,CAAC,IAAI,CAAE9D,SAAS,CAACuB,EAAE,CAAC,CACnCqC,QAAQ,CAACE,MAAM,CAAC,MAAM,CAAE9D,SAAS,CAACS,IAAI,CAAC,CACvCmD,QAAQ,CAACE,MAAM,CAAC,WAAW,CAAE9D,SAAS,CAACyC,SAAS,CAAC,CAEjD;AACA;AACA,GAAI,CAAAsB,MAAM,IAAA/B,MAAA,CAAMhD,MAAM,CAACiD,OAAO,eAAa,CAE3C;AACA,GAAI,CACF,KAAM,CAAAkB,KAAK,IAAAnB,MAAA,CAAIhD,MAAM,CAACiD,OAAO,eAAc,CAAEmB,MAAM,CAAE,MAAO,CAAC,CAAC,CAChE,CAAE,MAAAY,OAAA,CAAM,CACN;AACAD,MAAM,CAAG,0BAA0B,CACrC,CAEA,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACY,MAAM,CAAE,CACnCX,MAAM,CAAE,MAAM,CACda,IAAI,CAAEL,QACR,CAAC,CAAC,CAEF,GAAI,CAACV,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAtB,MAAA,CAAwBkB,QAAQ,CAACrB,MAAM,CAAE,CAAC,CAC3D,CAEA,KAAM,CAAAqC,MAAM,CAAG,KAAM,CAAAhB,QAAQ,CAACiB,IAAI,CAAC,CAAC,CAEpC;AACA,KAAM,CAAArC,cAAc,CAAG,EAAA6B,YAAA,CAAAO,MAAM,CAAChE,IAAI,UAAAyD,YAAA,iBAAXA,YAAA,CAAaS,QAAQ,GAAI,IAAI,CACpD,KAAM,KAAI,CAAC1B,iBAAiB,CAC1B1C,SAAS,CAACuB,EAAE,CACZ,UAAU,CACV,IAAI,CACJO,cACF,CAAC,CAED,MAAO,CACLP,EAAE,CAAEvB,SAAS,CAACuB,EAAE,CAChBQ,GAAG,CAAEmC,MAAM,CAACnC,GAAG,gCAAAC,MAAA,CAAkChC,SAAS,CAACuB,EAAE,QAAM,CACnEiB,UAAU,CAAE,GAAI,CAAAD,IAAI,CAAC,CAAC,CAAC8B,WAAW,CAAC,CAAC,CACpCC,cAAc,CAAEJ,MAAM,CACtBpC,cAAc,CAAEA,cAClB,CAAC,CACH,CAAE,MAAOjC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CAEnD;AACA,KAAM,KAAI,CAAC6C,iBAAiB,CAAC1C,SAAS,CAACuB,EAAE,CAAE,OAAO,CAAE1B,KAAK,CAAC0E,OAAO,CAAC,CAElE,KAAM,CAAA1E,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAoB,oBAAoBA,CAAA,CAAG,CAC3B,GAAI,CACF,KAAM,CAAA8C,MAAM,IAAA/B,MAAA,CAAMhD,MAAM,CAACiD,OAAO,cAAY,CAC5CnC,OAAO,CAACyD,GAAG,CAAC,iCAAiC,CAAEQ,MAAM,CAAC,CAEtD,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACY,MAAM,CAAE,CACnCX,MAAM,CAAE,KAAK,CACboB,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAI,CAACtB,QAAQ,CAACG,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,wBAAAtB,MAAA,CAAwBkB,QAAQ,CAACrB,MAAM,CAAE,CAAC,CAC3D,CAEA,KAAM,CAAA4C,IAAI,CAAG,KAAM,CAAAvB,QAAQ,CAACiB,IAAI,CAAC,CAAC,CAClC,KAAM,CAAArD,YAAY,CAAG2D,IAAI,CAACC,KAAK,EAAI,EAAE,CAErC5E,OAAO,CAACyD,GAAG,+CAAAvB,MAAA,CAAYlB,YAAY,CAAC+B,MAAM,yHAAwB,CAAC,CAEnE;AACA,KAAM,CAAA8B,iBAAiB,CAAG7D,YAAY,CAACO,GAAG,CAAEI,WAAW,GAAM,CAC3DF,EAAE,WAAAS,MAAA,CAAYP,WAAW,CAAC2C,QAAQ,CAAE,CAAE;AACtC3D,IAAI,CAAEgB,WAAW,CAAC2C,QAAQ,CAC1BQ,IAAI,CAAEnD,WAAW,CAACmD,IAAI,CACtB/C,MAAM,CAAE,UAAU,CAClBY,SAAS,CAAEhB,WAAW,CAACe,UAAU,CACjCV,cAAc,CAAEL,WAAW,CAAC2C,QAAQ,CACpCrC,GAAG,IAAAC,MAAA,CAAKhD,MAAM,CAACiD,OAAO,EAAAD,MAAA,CAAGP,WAAW,CAACM,GAAG,CAAE,CAC1C8C,YAAY,CAAE,IAAM;AACtB,CAAC,CAAC,CAAC,CAEH,MAAO,CAAAF,iBAAiB,CAC1B,CAAE,MAAO9E,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,CAAEA,KAAK,CAAC,CAC7D,MAAO,EAAE,CACX,CACF,CAEA;AACA,KAAM,CAAAiF,cAAcA,CAAA,CAAsB,IAArB,CAAAC,WAAW,CAAAnC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CACtC,GAAI,CACF,GAAI,CAAC,IAAI,CAACtD,EAAE,CAAE,KAAM,KAAI,CAACC,MAAM,CAAC,CAAC,CAEjC;AACA,KAAM,CAAAuB,YAAY,CAAG,KAAM,KAAI,CAACG,oBAAoB,CAAC,CAAC,CAEtD;AACA,KAAM,CAAAL,WAAW,CAAG,KAAM,KAAI,CAACtB,EAAE,CAACuB,MAAM,CAAC1B,UAAU,CAAC,CAEpD;AACA,KAAM,CAAA6F,eAAe,CAAG,GAAI,CAAA5D,GAAG,CAC7BN,YAAY,CAACO,GAAG,CAAEO,KAAK,EAAKA,KAAK,CAACE,cAAc,CAClD,CAAC,CAED;AACA,IAAK,KAAM,CAAAmD,UAAU,GAAI,CAAArE,WAAW,CAAE,CACpC,GACEqE,UAAU,CAACnD,cAAc,EACzBkD,eAAe,CAACtD,GAAG,CAACuD,UAAU,CAACnD,cAAc,CAAC,CAC9C,CACA,GAAImD,UAAU,CAACpD,MAAM,GAAK,UAAU,CAAE,CACpCoD,UAAU,CAACpD,MAAM,CAAG,UAAU,CAC9B,KAAM,KAAI,CAACvC,EAAE,CAACoB,GAAG,CAACvB,UAAU,CAAE8F,UAAU,CAAC,CAC3C,CACF,CACF,CAEA;AACA,KAAM,CAAAC,oBAAoB,CAAG,GAAI,CAAA9D,GAAG,CAClCR,WAAW,CACRuE,MAAM,CAAEvD,KAAK,EAAKA,KAAK,CAACE,cAAc,CAAC,CACvCT,GAAG,CAAEO,KAAK,EAAKA,KAAK,CAACE,cAAc,CACxC,CAAC,CAED,IAAK,KAAM,CAAAL,WAAW,GAAI,CAAAX,YAAY,CAAE,CACtC,GACE,CAACoE,oBAAoB,CAACxD,GAAG,CAACD,WAAW,CAACK,cAAc,CAAC,EACrDiD,WAAW,CACX,CACA;AACA;AACA,KAAM,KAAI,CAACzF,EAAE,CAACoB,GAAG,CAACvB,UAAU,CAAEsC,WAAW,CAAC,CAC1C,GAAIsD,WAAW,CAAE,CACfjF,OAAO,CAACyD,GAAG,yJAAAvB,MAAA,CAAiCP,WAAW,CAAChB,IAAI,CAAE,CAAC,CACjE,CACF,CACF,CAEAX,OAAO,CAACyD,GAAG,CAAC,oCAAoC,CAAC,CACjD,MAAO,KAAI,CACb,CAAE,MAAO1D,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,MAAO,MAAK,CACd,CACF,CAEA;AACA,KAAM,CAAAuF,oBAAoBA,CAAA,CAAG,CAC3B,GAAI,CACFtF,OAAO,CAACyD,GAAG,CAAC,yCAAyC,CAAC,CAEtD;AACA,KAAM,CAAA8B,qBAAqB,CAAG,KAAM,KAAI,CAAC1E,YAAY,CAAC,CAAC,CACvDb,OAAO,CAACyD,GAAG,8LAAAvB,MAAA,CAC8BqD,qBAAqB,CAACxC,MAAM,CACrE,CAAC,CAED;AACA,KAAM,KAAI,CAACiC,cAAc,CAAC,CAAC,CAE3B;AACA,KAAM,CAAAQ,kBAAkB,CAAG,KAAM,KAAI,CAAC3E,YAAY,CAAC,CAAC,CACpDb,OAAO,CAACyD,GAAG,wLAAAvB,MAAA,CAC6BsD,kBAAkB,CAACzC,MAAM,CACjE,CAAC,CAED,KAAM,CAAA/B,YAAY,CAAGwE,kBAAkB,CAACH,MAAM,CAC3CvD,KAAK,EAAKA,KAAK,CAACiD,YACnB,CAAC,CACD,KAAM,CAAAjE,WAAW,CAAG0E,kBAAkB,CAACH,MAAM,CAC1CvD,KAAK,EAAK,CAACA,KAAK,CAACiD,YACpB,CAAC,CAED/E,OAAO,CAACyD,GAAG,kGAAAvB,MAAA,CAAuBlB,YAAY,CAAC+B,MAAM,CAAE,CAAC,CACxD/C,OAAO,CAACyD,GAAG,kGAAAvB,MAAA,CAAuBpB,WAAW,CAACiC,MAAM,CAAE,CAAC,CACvD/C,OAAO,CAACyD,GAAG,CAAC,oCAAoC,CAAC,CAEjD,MAAO,CAAA+B,kBAAkB,CAC3B,CAAE,MAAOzF,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,CAAEA,KAAK,CAAC,CACvE;AACA,KAAM,CAAAe,WAAW,CAAG,KAAM,KAAI,CAACD,YAAY,CAAC,CAAC,CAC7Cb,OAAO,CAACyD,GAAG,oMAAAvB,MAAA,CAAyCpB,WAAW,CAACiC,MAAM,CAAE,CAAC,CACzE,MAAO,CAAAjC,WAAW,CACpB,CACF,CAEA;AACA,KAAM,CAAA2E,gBAAgBA,CAAA,CAAe,IAAd,CAAAC,OAAO,CAAA5C,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACjC,GAAI,CACF,GAAI,CAAC,IAAI,CAACtD,EAAE,CAAE,CACZ,KAAM,KAAI,CAACC,MAAM,CAAC,CAAC,CACrB,CAEA,KAAM,CAAAkG,UAAU,CAAG,GAAI,CAAAlD,IAAI,CAAC,CAAC,CAC7BkD,UAAU,CAACC,OAAO,CAACD,UAAU,CAACE,OAAO,CAAC,CAAC,CAAGH,OAAO,CAAC,CAElD,KAAM,CAAAI,MAAM,CAAG,KAAM,KAAI,CAACtG,EAAE,CAACuB,MAAM,CAAC1B,UAAU,CAAC,CAC/C,KAAM,CAAA0G,cAAc,CAAGD,MAAM,CAACT,MAAM,CAAEvD,KAAK,EAAK,CAC9C,KAAM,CAAAkE,SAAS,CAAG,GAAI,CAAAvD,IAAI,CAACX,KAAK,CAACa,SAAS,CAAC,CAC3C,MAAO,CAAAqD,SAAS,CAAGL,UAAU,EAAI7D,KAAK,CAACC,MAAM,GAAK,UAAU,CAC9D,CAAC,CAAC,CAEF,IAAK,KAAM,CAAAD,KAAK,GAAI,CAAAiE,cAAc,CAAE,CAClC,KAAM,KAAI,CAACvG,EAAE,CAACmE,MAAM,CAACtE,UAAU,CAAEyC,KAAK,CAACL,EAAE,CAAC,CAC5C,CAEA,MAAO,CAAAsE,cAAc,CAAChD,MAAM,CAC9B,CAAE,MAAOhD,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,MAAO,EAAC,CACV,CACF,CACF,CAEA,MAAO,MAAM,CAAAkG,YAAY,CAAG,GAAI,CAAA3G,YAAY,CAAC,CAAC,CAC9C,OAASA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}