{"ast":null,"code":"import { openDB } from \"idb\";\nconst DB_NAME = \"PhotoPWA\";\nconst DB_VERSION = 1;\nconst STORE_NAME = \"photos\";\nclass PhotoService {\n  constructor() {\n    this.db = null;\n    this.initDB();\n  }\n  async initDB() {\n    try {\n      this.db = await openDB(DB_NAME, DB_VERSION, {\n        upgrade(db) {\n          if (!db.objectStoreNames.contains(STORE_NAME)) {\n            db.createObjectStore(STORE_NAME, {\n              keyPath: \"id\"\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Ошибка инициализации IndexedDB:\", error);\n    }\n  }\n  async savePhoto(photoData) {\n    try {\n      if (!this.db) await this.initDB();\n\n      // Конвертируем File в ArrayBuffer для хранения\n      const arrayBuffer = await photoData.file.arrayBuffer();\n      const photoToSave = {\n        ...photoData,\n        fileData: arrayBuffer,\n        fileType: photoData.file.type,\n        fileName: photoData.file.name\n      };\n\n      // Удаляем оригинальный File объект\n      delete photoToSave.file;\n      await this.db.put(STORE_NAME, photoToSave);\n      return photoToSave;\n    } catch (error) {\n      console.error(\"Ошибка сохранения фотографии:\", error);\n      throw error;\n    }\n  }\n  async getAllPhotos() {\n    try {\n      if (!this.db) await this.initDB();\n      const photos = await this.db.getAll(STORE_NAME);\n\n      // Восстанавливаем File объекты из ArrayBuffer\n      return photos.map(photo => {\n        if (photo.fileData) {\n          const file = new File([photo.fileData], photo.fileName, {\n            type: photo.fileType\n          });\n          return {\n            ...photo,\n            file: file\n          };\n        }\n        return photo;\n      });\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n      return [];\n    }\n  }\n  async updatePhotoStatus(photoId, status, error = null, serverFilename = null) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n      const photo = await this.db.get(STORE_NAME, photoId);\n      if (photo) {\n        photo.status = status;\n        if (error) {\n          photo.error = error;\n        }\n        if (serverFilename) {\n          photo.serverFilename = serverFilename;\n        }\n        await this.db.put(STORE_NAME, photo);\n      }\n    } catch (error) {\n      console.error(\"Ошибка обновления статуса фотографии:\", error);\n    }\n  }\n  async deletePhoto(photoId) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      // Получаем информацию о фотографии перед удалением\n      const photo = await this.db.get(STORE_NAME, photoId);\n\n      // Удаляем файл с сервера, если он был загружен\n      if (photo && photo.serverFilename) {\n        try {\n          const response = await fetch(`http://localhost:3001/api/files/${photo.serverFilename}`, {\n            method: \"DELETE\"\n          });\n          if (!response.ok) {\n            console.warn(`Не удалось удалить файл с сервера: ${photo.serverFilename}`);\n          } else {\n            console.log(`Файл ${photo.serverFilename} успешно удален с сервера`);\n          }\n        } catch (serverError) {\n          console.warn(\"Ошибка при удалении файла с сервера:\", serverError);\n          // Продолжаем удаление из локальной БД даже если сервер недоступен\n        }\n      }\n\n      // Удаляем из локальной базы данных\n      await this.db.delete(STORE_NAME, photoId);\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      throw error;\n    }\n  }\n  async uploadPhoto(photoData) {\n    try {\n      var _result$file;\n      // Обновляем статус на \"загрузка\"\n      await this.updatePhotoStatus(photoData.id, \"uploading\");\n\n      // Создаем FormData для отправки файла\n      const formData = new FormData();\n      formData.append(\"photo\", photoData.file);\n      formData.append(\"id\", photoData.id);\n      formData.append(\"name\", photoData.name);\n      formData.append(\"createdAt\", photoData.createdAt);\n\n      // Отправляем на локальный сервер\n      // Если сервер не запущен, используем httpbin.org для демонстрации\n      let apiUrl = \"http://localhost:3001/api/upload\";\n\n      // Проверяем, доступен ли локальный сервер\n      try {\n        await fetch(\"http://localhost:3001/api/files\", {\n          method: \"HEAD\"\n        });\n      } catch {\n        // Если локальный сервер недоступен, используем httpbin\n        apiUrl = \"https://httpbin.org/post\";\n      }\n      const response = await fetch(apiUrl, {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n\n      // Сохраняем имя файла на сервере для последующего удаления\n      const serverFilename = ((_result$file = result.file) === null || _result$file === void 0 ? void 0 : _result$file.filename) || null;\n      await this.updatePhotoStatus(photoData.id, \"uploaded\", null, serverFilename);\n      return {\n        id: photoData.id,\n        url: result.url || `https://example.com/photos/${photoData.id}.jpg`,\n        uploadedAt: new Date().toISOString(),\n        serverResponse: result,\n        serverFilename: serverFilename\n      };\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n\n      // Обновляем статус на ошибку\n      await this.updatePhotoStatus(photoData.id, \"error\", error.message);\n      throw error;\n    }\n  }\n\n  // Метод для очистки старых фотографий (опционально)\n  async cleanupOldPhotos(daysOld = 30) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n      const photos = await this.db.getAll(STORE_NAME);\n      const photosToDelete = photos.filter(photo => {\n        const photoDate = new Date(photo.createdAt);\n        return photoDate < cutoffDate && photo.status === \"uploaded\";\n      });\n      for (const photo of photosToDelete) {\n        await this.db.delete(STORE_NAME, photo.id);\n      }\n      return photosToDelete.length;\n    } catch (error) {\n      console.error(\"Ошибка очистки старых фотографий:\", error);\n      return 0;\n    }\n  }\n}\nexport const photoService = new PhotoService();\nexport { PhotoService };","map":{"version":3,"names":["openDB","DB_NAME","DB_VERSION","STORE_NAME","PhotoService","constructor","db","initDB","upgrade","objectStoreNames","contains","createObjectStore","keyPath","error","console","savePhoto","photoData","arrayBuffer","file","photoToSave","fileData","fileType","type","fileName","name","put","getAllPhotos","photos","getAll","map","photo","File","updatePhotoStatus","photoId","status","serverFilename","get","deletePhoto","response","fetch","method","ok","warn","log","serverError","delete","uploadPhoto","_result$file","id","formData","FormData","append","createdAt","apiUrl","body","Error","result","json","filename","url","uploadedAt","Date","toISOString","serverResponse","message","cleanupOldPhotos","daysOld","cutoffDate","setDate","getDate","photosToDelete","filter","photoDate","length","photoService"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/services/PhotoService.js"],"sourcesContent":["import { openDB } from \"idb\";\n\nconst DB_NAME = \"PhotoPWA\";\nconst DB_VERSION = 1;\nconst STORE_NAME = \"photos\";\n\nclass PhotoService {\n  constructor() {\n    this.db = null;\n    this.initDB();\n  }\n\n  async initDB() {\n    try {\n      this.db = await openDB(DB_NAME, DB_VERSION, {\n        upgrade(db) {\n          if (!db.objectStoreNames.contains(STORE_NAME)) {\n            db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n          }\n        },\n      });\n    } catch (error) {\n      console.error(\"Ошибка инициализации IndexedDB:\", error);\n    }\n  }\n\n  async savePhoto(photoData) {\n    try {\n      if (!this.db) await this.initDB();\n\n      // Конвертируем File в ArrayBuffer для хранения\n      const arrayBuffer = await photoData.file.arrayBuffer();\n      const photoToSave = {\n        ...photoData,\n        fileData: arrayBuffer,\n        fileType: photoData.file.type,\n        fileName: photoData.file.name,\n      };\n\n      // Удаляем оригинальный File объект\n      delete photoToSave.file;\n\n      await this.db.put(STORE_NAME, photoToSave);\n      return photoToSave;\n    } catch (error) {\n      console.error(\"Ошибка сохранения фотографии:\", error);\n      throw error;\n    }\n  }\n\n  async getAllPhotos() {\n    try {\n      if (!this.db) await this.initDB();\n\n      const photos = await this.db.getAll(STORE_NAME);\n\n      // Восстанавливаем File объекты из ArrayBuffer\n      return photos.map((photo) => {\n        if (photo.fileData) {\n          const file = new File([photo.fileData], photo.fileName, {\n            type: photo.fileType,\n          });\n          return {\n            ...photo,\n            file: file,\n          };\n        }\n        return photo;\n      });\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n      return [];\n    }\n  }\n\n  async updatePhotoStatus(\n    photoId,\n    status,\n    error = null,\n    serverFilename = null\n  ) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      const photo = await this.db.get(STORE_NAME, photoId);\n      if (photo) {\n        photo.status = status;\n        if (error) {\n          photo.error = error;\n        }\n        if (serverFilename) {\n          photo.serverFilename = serverFilename;\n        }\n        await this.db.put(STORE_NAME, photo);\n      }\n    } catch (error) {\n      console.error(\"Ошибка обновления статуса фотографии:\", error);\n    }\n  }\n\n  async deletePhoto(photoId) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      // Получаем информацию о фотографии перед удалением\n      const photo = await this.db.get(STORE_NAME, photoId);\n\n      // Удаляем файл с сервера, если он был загружен\n      if (photo && photo.serverFilename) {\n        try {\n          const response = await fetch(\n            `http://localhost:3001/api/files/${photo.serverFilename}`,\n            {\n              method: \"DELETE\",\n            }\n          );\n\n          if (!response.ok) {\n            console.warn(\n              `Не удалось удалить файл с сервера: ${photo.serverFilename}`\n            );\n          } else {\n            console.log(\n              `Файл ${photo.serverFilename} успешно удален с сервера`\n            );\n          }\n        } catch (serverError) {\n          console.warn(\"Ошибка при удалении файла с сервера:\", serverError);\n          // Продолжаем удаление из локальной БД даже если сервер недоступен\n        }\n      }\n\n      // Удаляем из локальной базы данных\n      await this.db.delete(STORE_NAME, photoId);\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      throw error;\n    }\n  }\n\n  async uploadPhoto(photoData) {\n    try {\n      // Обновляем статус на \"загрузка\"\n      await this.updatePhotoStatus(photoData.id, \"uploading\");\n\n      // Создаем FormData для отправки файла\n      const formData = new FormData();\n      formData.append(\"photo\", photoData.file);\n      formData.append(\"id\", photoData.id);\n      formData.append(\"name\", photoData.name);\n      formData.append(\"createdAt\", photoData.createdAt);\n\n      // Отправляем на локальный сервер\n      // Если сервер не запущен, используем httpbin.org для демонстрации\n      let apiUrl = \"http://localhost:3001/api/upload\";\n\n      // Проверяем, доступен ли локальный сервер\n      try {\n        await fetch(\"http://localhost:3001/api/files\", { method: \"HEAD\" });\n      } catch {\n        // Если локальный сервер недоступен, используем httpbin\n        apiUrl = \"https://httpbin.org/post\";\n      }\n\n      const response = await fetch(apiUrl, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      // Сохраняем имя файла на сервере для последующего удаления\n      const serverFilename = result.file?.filename || null;\n      await this.updatePhotoStatus(\n        photoData.id,\n        \"uploaded\",\n        null,\n        serverFilename\n      );\n\n      return {\n        id: photoData.id,\n        url: result.url || `https://example.com/photos/${photoData.id}.jpg`,\n        uploadedAt: new Date().toISOString(),\n        serverResponse: result,\n        serverFilename: serverFilename,\n      };\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n\n      // Обновляем статус на ошибку\n      await this.updatePhotoStatus(photoData.id, \"error\", error.message);\n\n      throw error;\n    }\n  }\n\n  // Метод для очистки старых фотографий (опционально)\n  async cleanupOldPhotos(daysOld = 30) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n      const photos = await this.db.getAll(STORE_NAME);\n      const photosToDelete = photos.filter((photo) => {\n        const photoDate = new Date(photo.createdAt);\n        return photoDate < cutoffDate && photo.status === \"uploaded\";\n      });\n\n      for (const photo of photosToDelete) {\n        await this.db.delete(STORE_NAME, photo.id);\n      }\n\n      return photosToDelete.length;\n    } catch (error) {\n      console.error(\"Ошибка очистки старых фотографий:\", error);\n      return 0;\n    }\n  }\n}\n\nexport const photoService = new PhotoService();\nexport { PhotoService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}