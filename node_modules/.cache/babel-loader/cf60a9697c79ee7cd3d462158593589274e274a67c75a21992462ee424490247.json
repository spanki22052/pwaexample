{"ast":null,"code":"import _objectSpread from\"/Users/tigrotigro/Projects/Hakaton/pwaexample/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{openDB}from\"idb\";import config from\"../config.js\";const DB_NAME=\"PhotoPWA\";const DB_VERSION=1;const STORE_NAME=\"photos\";class PhotoService{constructor(){this.db=null;this.initDB();}async initDB(){try{this.db=await openDB(DB_NAME,DB_VERSION,{upgrade(db){if(!db.objectStoreNames.contains(STORE_NAME)){db.createObjectStore(STORE_NAME,{keyPath:\"id\"});}}});}catch(error){console.error(\"Ошибка инициализации IndexedDB:\",error);}}async savePhoto(photoData){try{if(!this.db)await this.initDB();// Конвертируем File в ArrayBuffer для хранения\nconst arrayBuffer=await photoData.file.arrayBuffer();const photoToSave=_objectSpread(_objectSpread({},photoData),{},{fileData:arrayBuffer,fileType:photoData.file.type,fileName:photoData.file.name});// Удаляем оригинальный File объект\ndelete photoToSave.file;await this.db.put(STORE_NAME,photoToSave);return photoToSave;}catch(error){console.error(\"Ошибка сохранения фотографии:\",error);throw error;}}async getAllPhotos(){try{if(!this.db)await this.initDB();const photos=await this.db.getAll(STORE_NAME);// Восстанавливаем File объекты из ArrayBuffer и устанавливаем правильные URL\nreturn photos.map(photo=>{// Если фото загружено на сервер, используем серверный URL\nif(photo.status===\"uploaded\"&&photo.serverFilename){return _objectSpread(_objectSpread({},photo),{},{url:\"\".concat(config.API_URL,\"/uploads/\").concat(photo.serverFilename)// Не создаем File объект для загруженных фото, он не нужен\n});}// Для локальных фото создаем File объект\nif(photo.fileData){const file=new File([photo.fileData],photo.fileName,{type:photo.fileType});return _objectSpread(_objectSpread({},photo),{},{file:file});}return photo;});}catch(error){console.error(\"Ошибка загрузки фотографий:\",error);return[];}}async updatePhotoStatus(photoId,status){let error=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let serverFilename=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;try{if(!this.db){await this.initDB();}const photo=await this.db.get(STORE_NAME,photoId);if(photo){photo.status=status;if(error){photo.error=error;}if(serverFilename){photo.serverFilename=serverFilename;}await this.db.put(STORE_NAME,photo);}}catch(error){console.error(\"Ошибка обновления статуса фотографии:\",error);}}async deletePhoto(photoId){try{if(!this.db){await this.initDB();}// Получаем информацию о фотографии перед удалением\nconst photo=await this.db.get(STORE_NAME,photoId);// Удаляем файл с сервера, если он был загружен\nif(photo&&photo.serverFilename){try{const response=await fetch(\"\".concat(config.API_URL,\"/api/files/\").concat(photo.serverFilename),{method:\"DELETE\"});if(!response.ok){console.warn(\"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0443\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0444\\u0430\\u0439\\u043B \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \".concat(photo.serverFilename));}else{console.log(\"\\u0424\\u0430\\u0439\\u043B \".concat(photo.serverFilename,\" \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0443\\u0434\\u0430\\u043B\\u0435\\u043D \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430\"));}}catch(serverError){console.warn(\"Ошибка при удалении файла с сервера:\",serverError);// Продолжаем удаление из локальной БД даже если сервер недоступен\n}}// Удаляем из локальной базы данных\nawait this.db.delete(STORE_NAME,photoId);}catch(error){console.error(\"Ошибка удаления фотографии:\",error);throw error;}}async uploadPhoto(photoData){try{var _result$file;// Обновляем статус на \"загрузка\"\nawait this.updatePhotoStatus(photoData.id,\"uploading\");// Создаем FormData для отправки файла\nconst formData=new FormData();formData.append(\"photo\",photoData.file);formData.append(\"id\",photoData.id);formData.append(\"name\",photoData.name);formData.append(\"createdAt\",photoData.createdAt);// Отправляем на сервер\n// Если сервер не запущен, используем httpbin.org для демонстрации\nlet apiUrl=\"\".concat(config.API_URL,\"/api/upload\");// Проверяем, доступен ли сервер\ntry{await fetch(\"\".concat(config.API_URL,\"/api/files\"),{method:\"HEAD\"});}catch(_unused){// Если сервер недоступен, используем httpbin\napiUrl=\"https://httpbin.org/post\";}const response=await fetch(apiUrl,{method:\"POST\",body:formData});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();// Сохраняем имя файла на сервере для последующего удаления\nconst serverFilename=((_result$file=result.file)===null||_result$file===void 0?void 0:_result$file.filename)||null;await this.updatePhotoStatus(photoData.id,\"uploaded\",null,serverFilename);return{id:photoData.id,url:result.url||\"https://example.com/photos/\".concat(photoData.id,\".jpg\"),uploadedAt:new Date().toISOString(),serverResponse:result,serverFilename:serverFilename};}catch(error){console.error(\"Ошибка загрузки фотографии:\",error);// Обновляем статус на ошибку\nawait this.updatePhotoStatus(photoData.id,\"error\",error.message);throw error;}}// Метод для очистки старых фотографий (опционально)\nasync cleanupOldPhotos(){let daysOld=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;try{if(!this.db){await this.initDB();}const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-daysOld);const photos=await this.db.getAll(STORE_NAME);const photosToDelete=photos.filter(photo=>{const photoDate=new Date(photo.createdAt);return photoDate<cutoffDate&&photo.status===\"uploaded\";});for(const photo of photosToDelete){await this.db.delete(STORE_NAME,photo.id);}return photosToDelete.length;}catch(error){console.error(\"Ошибка очистки старых фотографий:\",error);return 0;}}}export const photoService=new PhotoService();export{PhotoService};","map":{"version":3,"names":["openDB","config","DB_NAME","DB_VERSION","STORE_NAME","PhotoService","constructor","db","initDB","upgrade","objectStoreNames","contains","createObjectStore","keyPath","error","console","savePhoto","photoData","arrayBuffer","file","photoToSave","_objectSpread","fileData","fileType","type","fileName","name","put","getAllPhotos","photos","getAll","map","photo","status","serverFilename","url","concat","API_URL","File","updatePhotoStatus","photoId","arguments","length","undefined","get","deletePhoto","response","fetch","method","ok","warn","log","serverError","delete","uploadPhoto","_result$file","id","formData","FormData","append","createdAt","apiUrl","_unused","body","Error","result","json","filename","uploadedAt","Date","toISOString","serverResponse","message","cleanupOldPhotos","daysOld","cutoffDate","setDate","getDate","photosToDelete","filter","photoDate","photoService"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/services/PhotoService.js"],"sourcesContent":["import { openDB } from \"idb\";\nimport config from \"../config.js\";\n\nconst DB_NAME = \"PhotoPWA\";\nconst DB_VERSION = 1;\nconst STORE_NAME = \"photos\";\n\nclass PhotoService {\n  constructor() {\n    this.db = null;\n    this.initDB();\n  }\n\n  async initDB() {\n    try {\n      this.db = await openDB(DB_NAME, DB_VERSION, {\n        upgrade(db) {\n          if (!db.objectStoreNames.contains(STORE_NAME)) {\n            db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n          }\n        },\n      });\n    } catch (error) {\n      console.error(\"Ошибка инициализации IndexedDB:\", error);\n    }\n  }\n\n  async savePhoto(photoData) {\n    try {\n      if (!this.db) await this.initDB();\n\n      // Конвертируем File в ArrayBuffer для хранения\n      const arrayBuffer = await photoData.file.arrayBuffer();\n      const photoToSave = {\n        ...photoData,\n        fileData: arrayBuffer,\n        fileType: photoData.file.type,\n        fileName: photoData.file.name,\n      };\n\n      // Удаляем оригинальный File объект\n      delete photoToSave.file;\n\n      await this.db.put(STORE_NAME, photoToSave);\n      return photoToSave;\n    } catch (error) {\n      console.error(\"Ошибка сохранения фотографии:\", error);\n      throw error;\n    }\n  }\n\n  async getAllPhotos() {\n    try {\n      if (!this.db) await this.initDB();\n\n      const photos = await this.db.getAll(STORE_NAME);\n\n      // Восстанавливаем File объекты из ArrayBuffer и устанавливаем правильные URL\n      return photos.map((photo) => {\n        // Если фото загружено на сервер, используем серверный URL\n        if (photo.status === \"uploaded\" && photo.serverFilename) {\n          return {\n            ...photo,\n            url: `${config.API_URL}/uploads/${photo.serverFilename}`,\n            // Не создаем File объект для загруженных фото, он не нужен\n          };\n        }\n\n        // Для локальных фото создаем File объект\n        if (photo.fileData) {\n          const file = new File([photo.fileData], photo.fileName, {\n            type: photo.fileType,\n          });\n          return {\n            ...photo,\n            file: file,\n          };\n        }\n\n        return photo;\n      });\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n      return [];\n    }\n  }\n\n  async updatePhotoStatus(\n    photoId,\n    status,\n    error = null,\n    serverFilename = null\n  ) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      const photo = await this.db.get(STORE_NAME, photoId);\n      if (photo) {\n        photo.status = status;\n        if (error) {\n          photo.error = error;\n        }\n        if (serverFilename) {\n          photo.serverFilename = serverFilename;\n        }\n        await this.db.put(STORE_NAME, photo);\n      }\n    } catch (error) {\n      console.error(\"Ошибка обновления статуса фотографии:\", error);\n    }\n  }\n\n  async deletePhoto(photoId) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      // Получаем информацию о фотографии перед удалением\n      const photo = await this.db.get(STORE_NAME, photoId);\n\n      // Удаляем файл с сервера, если он был загружен\n      if (photo && photo.serverFilename) {\n        try {\n          const response = await fetch(\n            `${config.API_URL}/api/files/${photo.serverFilename}`,\n            {\n              method: \"DELETE\",\n            }\n          );\n\n          if (!response.ok) {\n            console.warn(\n              `Не удалось удалить файл с сервера: ${photo.serverFilename}`\n            );\n          } else {\n            console.log(\n              `Файл ${photo.serverFilename} успешно удален с сервера`\n            );\n          }\n        } catch (serverError) {\n          console.warn(\"Ошибка при удалении файла с сервера:\", serverError);\n          // Продолжаем удаление из локальной БД даже если сервер недоступен\n        }\n      }\n\n      // Удаляем из локальной базы данных\n      await this.db.delete(STORE_NAME, photoId);\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      throw error;\n    }\n  }\n\n  async uploadPhoto(photoData) {\n    try {\n      // Обновляем статус на \"загрузка\"\n      await this.updatePhotoStatus(photoData.id, \"uploading\");\n\n      // Создаем FormData для отправки файла\n      const formData = new FormData();\n      formData.append(\"photo\", photoData.file);\n      formData.append(\"id\", photoData.id);\n      formData.append(\"name\", photoData.name);\n      formData.append(\"createdAt\", photoData.createdAt);\n\n      // Отправляем на сервер\n      // Если сервер не запущен, используем httpbin.org для демонстрации\n      let apiUrl = `${config.API_URL}/api/upload`;\n\n      // Проверяем, доступен ли сервер\n      try {\n        await fetch(`${config.API_URL}/api/files`, { method: \"HEAD\" });\n      } catch {\n        // Если сервер недоступен, используем httpbin\n        apiUrl = \"https://httpbin.org/post\";\n      }\n\n      const response = await fetch(apiUrl, {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      // Сохраняем имя файла на сервере для последующего удаления\n      const serverFilename = result.file?.filename || null;\n      await this.updatePhotoStatus(\n        photoData.id,\n        \"uploaded\",\n        null,\n        serverFilename\n      );\n\n      return {\n        id: photoData.id,\n        url: result.url || `https://example.com/photos/${photoData.id}.jpg`,\n        uploadedAt: new Date().toISOString(),\n        serverResponse: result,\n        serverFilename: serverFilename,\n      };\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n\n      // Обновляем статус на ошибку\n      await this.updatePhotoStatus(photoData.id, \"error\", error.message);\n\n      throw error;\n    }\n  }\n\n  // Метод для очистки старых фотографий (опционально)\n  async cleanupOldPhotos(daysOld = 30) {\n    try {\n      if (!this.db) {\n        await this.initDB();\n      }\n\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n      const photos = await this.db.getAll(STORE_NAME);\n      const photosToDelete = photos.filter((photo) => {\n        const photoDate = new Date(photo.createdAt);\n        return photoDate < cutoffDate && photo.status === \"uploaded\";\n      });\n\n      for (const photo of photosToDelete) {\n        await this.db.delete(STORE_NAME, photo.id);\n      }\n\n      return photosToDelete.length;\n    } catch (error) {\n      console.error(\"Ошибка очистки старых фотографий:\", error);\n      return 0;\n    }\n  }\n}\n\nexport const photoService = new PhotoService();\nexport { PhotoService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}