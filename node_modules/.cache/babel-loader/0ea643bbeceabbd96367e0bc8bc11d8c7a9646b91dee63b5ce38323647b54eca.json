{"ast":null,"code":"// Этот файл можно использовать для регистрации Service Worker\n// и сообщения о том, что приложение готово к работе офлайн\nconst isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] - это IPv6 localhost адрес.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.0/8 считаются localhost для IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));// Конфигурация для регистрации Service Worker\nexport function register(config){if(\"serviceWorker\"in navigator){// URL конструктор доступен во всех браузерах, которые поддерживают SW.\nconst publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Наш SW не будет работать, если PUBLIC_URL находится на другом домене\n// от того, где обслуживается наша страница. Это может произойти, если\n// CDN используется для обслуживания assets; см. https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",()=>{const swUrl=\"\".concat(process.env.PUBLIC_URL,\"/sw.js\");if(isLocalhost){// Это выполняется на localhost. Давайте проверим, есть ли service worker файл или нет.\ncheckValidServiceWorker(swUrl,config);// Добавляем дополнительное логирование в localhost, указывая разработчикам\n// что SW не работает из-за кеширования. См. https://github.com/facebook/create-react-app/issues/1860\nnavigator.serviceWorker.ready.then(()=>{console.log(\"Это веб-приложение обслуживается кешем в первую очередь. \"+\"Узнайте больше на https://bit.ly/CRA-PWA\");});}else{// Не localhost. Просто регистрируем service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(registration=>{registration.onupdatefound=()=>{const installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=()=>{if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// В этот момент, старый контент будет очищен и\n// новый контент будет добавлен в кеш.\n// Это хук для отображения \"Новый контент доступен; пожалуйста, обновите.\"\n// сообщения в вашем веб-приложении.\nconsole.log(\"Новый контент доступен и будет использован, когда все \"+\"вкладки для этой страницы будут закрыты. См. https://bit.ly/CRA-PWA.\");// Выполняем callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// В этот момент, все было кешировано.\n// Это хук для отображения \"Контент кеширован для офлайн использования.\"\n// сообщения.\nconsole.log(\"Контент кеширован для офлайн использования.\");// Выполняем callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(error=>{console.error(\"Ошибка во время регистрации service worker:\",error);});}function checkValidServiceWorker(swUrl,config){// Проверяем, есть ли service worker файл или нет.\nfetch(swUrl,{headers:{\"Service-Worker\":\"script\"}}).then(response=>{// Убеждаемся, что service worker существует, и что мы действительно получаем JS файл.\nconst contentType=response.headers.get(\"content-type\");if(response.status===404||contentType!=null&&contentType.indexOf(\"javascript\")===-1){// Service worker не найден. Вероятно, это другая приложение. Или\n// pre-cache не включен. Или service worker файл не существует.\nnavigator.serviceWorker.ready.then(registration=>{registration.unregister().then(()=>{window.location.reload();});});}else{// Service worker найден. Продолжаем как обычно.\nregisterValidSW(swUrl,config);}}).catch(()=>{console.log(\"Нет интернет-соединения. Приложение работает в офлайн режиме.\");});}export function unregister(){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();}).catch(error=>{console.error(error.message);});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/serviceWorkerRegistration.js"],"sourcesContent":["// Этот файл можно использовать для регистрации Service Worker\n// и сообщения о том, что приложение готово к работе офлайн\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] - это IPv6 localhost адрес.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 считаются localhost для IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n// Конфигурация для регистрации Service Worker\n\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // URL конструктор доступен во всех браузерах, которые поддерживают SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Наш SW не будет работать, если PUBLIC_URL находится на другом домене\n      // от того, где обслуживается наша страница. Это может произойти, если\n      // CDN используется для обслуживания assets; см. https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // Это выполняется на localhost. Давайте проверим, есть ли service worker файл или нет.\n        checkValidServiceWorker(swUrl, config);\n\n        // Добавляем дополнительное логирование в localhost, указывая разработчикам\n        // что SW не работает из-за кеширования. См. https://github.com/facebook/create-react-app/issues/1860\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"Это веб-приложение обслуживается кешем в первую очередь. \" +\n              \"Узнайте больше на https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Не localhost. Просто регистрируем service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // В этот момент, старый контент будет очищен и\n              // новый контент будет добавлен в кеш.\n              // Это хук для отображения \"Новый контент доступен; пожалуйста, обновите.\"\n              // сообщения в вашем веб-приложении.\n              console.log(\n                \"Новый контент доступен и будет использован, когда все \" +\n                  \"вкладки для этой страницы будут закрыты. См. https://bit.ly/CRA-PWA.\"\n              );\n\n              // Выполняем callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // В этот момент, все было кешировано.\n              // Это хук для отображения \"Контент кеширован для офлайн использования.\"\n              // сообщения.\n              console.log(\"Контент кеширован для офлайн использования.\");\n\n              // Выполняем callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Ошибка во время регистрации service worker:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Проверяем, есть ли service worker файл или нет.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Убеждаемся, что service worker существует, и что мы действительно получаем JS файл.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // Service worker не найден. Вероятно, это другая приложение. Или\n        // pre-cache не включен. Или service worker файл не существует.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker найден. Продолжаем как обычно.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"Нет интернет-соединения. Приложение работает в офлайн режиме.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}