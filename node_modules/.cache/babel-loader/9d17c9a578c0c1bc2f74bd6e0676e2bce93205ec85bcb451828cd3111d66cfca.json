{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import PhotoUploader from\"./components/PhotoUploader\";import PhotoGrid from\"./components/PhotoGrid\";import NetworkStatus from\"./components/NetworkStatus\";import{photoService}from\"./services/PhotoService\";import{checkAllPermissions,displayPermissionsInfo,isHTTPS}from\"./utils/permissions\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[photos,setPhotos]=useState([]);const[isOnline,setIsOnline]=useState(navigator.onLine);const[isLoading,setIsLoading]=useState(true);// Проверка статуса сети\nuseEffect(()=>{const handleOnline=()=>setIsOnline(true);const handleOffline=()=>setIsOnline(false);window.addEventListener(\"online\",handleOnline);window.addEventListener(\"offline\",handleOffline);return()=>{window.removeEventListener(\"online\",handleOnline);window.removeEventListener(\"offline\",handleOffline);};},[]);const loadPhotos=useCallback(async()=>{try{setIsLoading(true);const savedPhotos=await photoService.getAllPhotos();setPhotos(savedPhotos);console.log(savedPhotos);}catch(error){console.error(\"Ошибка загрузки фотографий:\",error);}finally{setIsLoading(false);}},[]);const retryPendingUploads=useCallback(async()=>{try{// Получаем актуальные фотографии из базы данных вместо state\nconst allPhotos=await photoService.getAllPhotos();const pendingPhotos=allPhotos.filter(photo=>photo.status===\"pending\");for(const photo of pendingPhotos){await photoService.uploadPhoto(photo);}// Перезагружаем список фотографий\nawait loadPhotos();}catch(error){console.error(\"Ошибка повторной отправки:\",error);}},[loadPhotos]);// Загрузка фотографий при инициализации\nuseEffect(()=>{loadPhotos();// Проверяем разрешения при запуске приложения\nconst checkPermissions=async()=>{try{const permissions=await checkAllPermissions();displayPermissionsInfo(permissions);// Предупреждаем если не HTTPS (кроме localhost)\nif(!isHTTPS()&&window.location.hostname!==\"localhost\"){console.warn(\"⚠️ Приложение работает по HTTP. Для полной функциональности камеры необходим HTTPS.\");}}catch(error){console.error(\"Ошибка при проверке разрешений:\",error);}};checkPermissions();},[loadPhotos]);// Попытка отправить отложенные фотографии при восстановлении сети\nuseEffect(()=>{if(isOnline){retryPendingUploads();}},[isOnline,retryPendingUploads]);const handlePhotoUpload=async file=>{try{const photoData={id:Date.now().toString()+Math.random().toString(36).substr(2,9),// Более уникальный ID\nfile:file,name:file.name,size:file.size,status:\"pending\",createdAt:new Date().toISOString()};// Сохраняем в IndexedDB\nawait photoService.savePhoto(photoData);// Обновляем состояние\nsetPhotos(prev=>[...prev,photoData]);// Пытаемся отправить, если есть интернет\nif(isOnline){try{await photoService.uploadPhoto(photoData);await loadPhotos();// Обновляем статус\n}catch(uploadError){console.error(\"Ошибка загрузки на сервер:\",uploadError);// Не блокируем интерфейс, просто логируем ошибку\nawait loadPhotos();// Обновляем статус с ошибкой\n}}}catch(error){console.error(\"Ошибка загрузки фотографии:\",error);}};const handleRetryUpload=async photoId=>{try{const photo=photos.find(p=>p.id===photoId);if(photo){await photoService.uploadPhoto(photo);await loadPhotos();}}catch(error){console.error(\"Ошибка повторной отправки:\",error);}};const handleDeletePhoto=async photoId=>{try{await photoService.deletePhoto(photoId);// Обновляем состояние, удаляя фотографию из списка\nsetPhotos(prev=>prev.filter(photo=>photo.id!==photoId));}catch(error){console.error(\"Ошибка удаления фотографии:\",error);alert(\"Не удалось удалить фотографию. Попробуйте еще раз.\");}};if(isLoading){return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0444\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u0439...\"})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83D\\uDCF8 Photo Upload PWA\"}),/*#__PURE__*/_jsx(NetworkStatus,{isOnline:isOnline})]}),/*#__PURE__*/_jsx(PhotoUploader,{onPhotoUpload:handlePhotoUpload}),/*#__PURE__*/_jsx(PhotoGrid,{photos:photos,onRetryUpload:handleRetryUpload,onDeletePhoto:handleDeletePhoto,isOnline:isOnline})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","PhotoUploader","PhotoGrid","NetworkStatus","photoService","checkAllPermissions","displayPermissionsInfo","isHTTPS","jsx","_jsx","jsxs","_jsxs","App","photos","setPhotos","isOnline","setIsOnline","navigator","onLine","isLoading","setIsLoading","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadPhotos","savedPhotos","getAllPhotos","console","log","error","retryPendingUploads","allPhotos","pendingPhotos","filter","photo","status","uploadPhoto","checkPermissions","permissions","location","hostname","warn","handlePhotoUpload","file","photoData","id","Date","now","toString","Math","random","substr","name","size","createdAt","toISOString","savePhoto","prev","uploadError","handleRetryUpload","photoId","find","p","handleDeletePhoto","deletePhoto","alert","className","children","onPhotoUpload","onRetryUpload","onDeletePhoto"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PhotoUploader from \"./components/PhotoUploader\";\nimport PhotoGrid from \"./components/PhotoGrid\";\nimport NetworkStatus from \"./components/NetworkStatus\";\nimport { photoService } from \"./services/PhotoService\";\nimport {\n  checkAllPermissions,\n  displayPermissionsInfo,\n  isHTTPS,\n} from \"./utils/permissions\";\n\nfunction App() {\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  const loadPhotos = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const savedPhotos = await photoService.getAllPhotos();\n      setPhotos(savedPhotos);\n      console.log(savedPhotos);\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const retryPendingUploads = useCallback(async () => {\n    try {\n      // Получаем актуальные фотографии из базы данных вместо state\n      const allPhotos = await photoService.getAllPhotos();\n      const pendingPhotos = allPhotos.filter(\n        (photo) => photo.status === \"pending\"\n      );\n\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  }, [loadPhotos]);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    loadPhotos();\n\n    // Проверяем разрешения при запуске приложения\n    const checkPermissions = async () => {\n      try {\n        const permissions = await checkAllPermissions();\n        displayPermissionsInfo(permissions);\n\n        // Предупреждаем если не HTTPS (кроме localhost)\n        if (!isHTTPS() && window.location.hostname !== \"localhost\") {\n          console.warn(\n            \"⚠️ Приложение работает по HTTP. Для полной функциональности камеры необходим HTTPS.\"\n          );\n        }\n      } catch (error) {\n        console.error(\"Ошибка при проверке разрешений:\", error);\n      }\n    };\n\n    checkPermissions();\n  }, [loadPhotos]);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, retryPendingUploads]);\n\n  const handlePhotoUpload = async (file) => {\n    try {\n      const photoData = {\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9), // Более уникальный ID\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n      };\n\n      // Сохраняем в IndexedDB\n      await photoService.savePhoto(photoData);\n\n      // Обновляем состояние\n      setPhotos((prev) => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        try {\n          await photoService.uploadPhoto(photoData);\n          await loadPhotos(); // Обновляем статус\n        } catch (uploadError) {\n          console.error(\"Ошибка загрузки на сервер:\", uploadError);\n          // Не блокируем интерфейс, просто логируем ошибку\n          await loadPhotos(); // Обновляем статус с ошибкой\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n    }\n  };\n\n  const handleRetryUpload = async (photoId) => {\n    try {\n      const photo = photos.find((p) => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  };\n\n  const handleDeletePhoto = async (photoId) => {\n    try {\n      await photoService.deletePhoto(photoId);\n      // Обновляем состояние, удаляя фотографию из списка\n      setPhotos((prev) => prev.filter((photo) => photo.id !== photoId));\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      alert(\"Не удалось удалить фотографию. Попробуйте еще раз.\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container\">\n        <div className=\"loading\">Загрузка фотографий...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <h1>📸 Photo Upload PWA</h1>\n        <NetworkStatus isOnline={isOnline} />\n      </header>\n\n      <PhotoUploader onPhotoUpload={handlePhotoUpload} />\n\n      <PhotoGrid\n        photos={photos}\n        onRetryUpload={handleRetryUpload}\n        onDeletePhoto={handleDeletePhoto}\n        isOnline={isOnline}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}