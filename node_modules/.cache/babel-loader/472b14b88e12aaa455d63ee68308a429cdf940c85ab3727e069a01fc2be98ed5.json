{"ast":null,"code":"// Этот файл можно использовать для регистрации Service Worker\n// и сообщения о том, что приложение готово к работе офлайн\n\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" ||\n// [::1] - это IPv6 localhost адрес.\nwindow.location.hostname === \"[::1]\" ||\n// 127.0.0.0/8 считаются localhost для IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\n// Конфигурация для регистрации Service Worker\n\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // URL конструктор доступен во всех браузерах, которые поддерживают SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Наш SW не будет работать, если PUBLIC_URL находится на другом домене\n      // от того, где обслуживается наша страница. Это может произойти, если\n      // CDN используется для обслуживания assets; см. https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n      if (isLocalhost) {\n        // Это выполняется на localhost. Давайте проверим, есть ли service worker файл или нет.\n        checkValidServiceWorker(swUrl, config);\n\n        // Добавляем дополнительное логирование в localhost, указывая разработчикам\n        // что SW не работает из-за кеширования. См. https://github.com/facebook/create-react-app/issues/1860\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"Это веб-приложение обслуживается кешем в первую очередь. \" + \"Узнайте больше на https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Не localhost. Просто регистрируем service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // В этот момент, старый контент будет очищен и\n            // новый контент будет добавлен в кеш.\n            // Это хук для отображения \"Новый контент доступен; пожалуйста, обновите.\"\n            // сообщения в вашем веб-приложении.\n            console.log(\"Новый контент доступен и будет использован, когда все \" + \"вкладки для этой страницы будут закрыты. См. https://bit.ly/CRA-PWA.\");\n\n            // Выполняем callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // В этот момент, все было кешировано.\n            // Это хук для отображения \"Контент кеширован для офлайн использования.\"\n            // сообщения.\n            console.log(\"Контент кеширован для офлайн использования.\");\n\n            // Выполняем callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Ошибка во время регистрации service worker:\", error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Проверяем, есть ли service worker файл или нет.\n  fetch(swUrl, {\n    headers: {\n      \"Service-Worker\": \"script\"\n    }\n  }).then(response => {\n    // Убеждаемся, что service worker существует, и что мы действительно получаем JS файл.\n    const contentType = response.headers.get(\"content-type\");\n    if (response.status === 404 || contentType != null && contentType.indexOf(\"javascript\") === -1) {\n      // Service worker не найден. Вероятно, это другая приложение. Или\n      // pre-cache не включен. Или service worker файл не существует.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker найден. Продолжаем как обычно.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log(\"Нет интернет-соединения. Приложение работает в офлайн режиме.\");\n  });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/Users/tigrotigro/Projects/Hakaton/PWA example/src/serviceWorkerRegistration.js"],"sourcesContent":["// Этот файл можно использовать для регистрации Service Worker\n// и сообщения о том, что приложение готово к работе офлайн\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] - это IPv6 localhost адрес.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 считаются localhost для IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n// Конфигурация для регистрации Service Worker\n\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // URL конструктор доступен во всех браузерах, которые поддерживают SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Наш SW не будет работать, если PUBLIC_URL находится на другом домене\n      // от того, где обслуживается наша страница. Это может произойти, если\n      // CDN используется для обслуживания assets; см. https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // Это выполняется на localhost. Давайте проверим, есть ли service worker файл или нет.\n        checkValidServiceWorker(swUrl, config);\n\n        // Добавляем дополнительное логирование в localhost, указывая разработчикам\n        // что SW не работает из-за кеширования. См. https://github.com/facebook/create-react-app/issues/1860\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"Это веб-приложение обслуживается кешем в первую очередь. \" +\n              \"Узнайте больше на https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Не localhost. Просто регистрируем service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // В этот момент, старый контент будет очищен и\n              // новый контент будет добавлен в кеш.\n              // Это хук для отображения \"Новый контент доступен; пожалуйста, обновите.\"\n              // сообщения в вашем веб-приложении.\n              console.log(\n                \"Новый контент доступен и будет использован, когда все \" +\n                  \"вкладки для этой страницы будут закрыты. См. https://bit.ly/CRA-PWA.\"\n              );\n\n              // Выполняем callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // В этот момент, все было кешировано.\n              // Это хук для отображения \"Контент кеширован для офлайн использования.\"\n              // сообщения.\n              console.log(\"Контент кеширован для офлайн использования.\");\n\n              // Выполняем callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Ошибка во время регистрации service worker:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Проверяем, есть ли service worker файл или нет.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Убеждаемся, что service worker существует, и что мы действительно получаем JS файл.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // Service worker не найден. Вероятно, это другая приложение. Или\n        // pre-cache не включен. Или service worker файл не существует.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker найден. Продолжаем как обычно.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"Нет интернет-соединения. Приложение работает в офлайн режиме.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}