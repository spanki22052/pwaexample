{"ast":null,"code":"var _jsxFileName = \"/Users/tigrotigro/Projects/Hakaton/pwaexample/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport PhotoUploader from \"./components/PhotoUploader\";\nimport PhotoGrid from \"./components/PhotoGrid\";\nimport NetworkStatus from \"./components/NetworkStatus\";\nimport { photoService } from \"./services/PhotoService\";\nimport { checkAllPermissions, displayPermissionsInfo, isHTTPS } from \"./utils/permissions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n  const loadPhotos = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const savedPhotos = await photoService.getAllPhotos();\n      setPhotos(savedPhotos);\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const retryPendingUploads = useCallback(async () => {\n    try {\n      // Получаем актуальные фотографии из базы данных вместо state\n      const allPhotos = await photoService.getAllPhotos();\n      const pendingPhotos = allPhotos.filter(photo => photo.status === \"pending\");\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  }, [loadPhotos]);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    loadPhotos();\n  }, [loadPhotos]);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, retryPendingUploads]);\n  const handlePhotoUpload = async file => {\n    try {\n      const photoData = {\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9),\n        // Более уникальный ID\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: \"pending\",\n        createdAt: new Date().toISOString()\n      };\n\n      // Сохраняем в IndexedDB\n      await photoService.savePhoto(photoData);\n\n      // Обновляем состояние\n      setPhotos(prev => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        try {\n          await photoService.uploadPhoto(photoData);\n          await loadPhotos(); // Обновляем статус\n        } catch (uploadError) {\n          console.error(\"Ошибка загрузки на сервер:\", uploadError);\n          // Не блокируем интерфейс, просто логируем ошибку\n          await loadPhotos(); // Обновляем статус с ошибкой\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n    }\n  };\n  const handleRetryUpload = async photoId => {\n    try {\n      const photo = photos.find(p => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  };\n  const handleDeletePhoto = async photoId => {\n    try {\n      await photoService.deletePhoto(photoId);\n      // Обновляем состояние, удаляя фотографию из списка\n      setPhotos(prev => prev.filter(photo => photo.id !== photoId));\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      alert(\"Не удалось удалить фотографию. Попробуйте еще раз.\");\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0444\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u0439...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDCF8 Photo Upload PWA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NetworkStatus, {\n        isOnline: isOnline\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoUploader, {\n      onPhotoUpload: handlePhotoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoGrid, {\n      photos: photos,\n      onRetryUpload: handleRetryUpload,\n      onDeletePhoto: handleDeletePhoto,\n      isOnline: isOnline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"voBiuaQPdSeihMToA8LvKRBPHvA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","PhotoUploader","PhotoGrid","NetworkStatus","photoService","checkAllPermissions","displayPermissionsInfo","isHTTPS","jsxDEV","_jsxDEV","App","_s","photos","setPhotos","isOnline","setIsOnline","navigator","onLine","isLoading","setIsLoading","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadPhotos","savedPhotos","getAllPhotos","error","console","retryPendingUploads","allPhotos","pendingPhotos","filter","photo","status","uploadPhoto","handlePhotoUpload","file","photoData","id","Date","now","toString","Math","random","substr","name","size","createdAt","toISOString","savePhoto","prev","uploadError","handleRetryUpload","photoId","find","p","handleDeletePhoto","deletePhoto","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPhotoUpload","onRetryUpload","onDeletePhoto","_c","$RefreshReg$"],"sources":["/Users/tigrotigro/Projects/Hakaton/pwaexample/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport PhotoUploader from \"./components/PhotoUploader\";\nimport PhotoGrid from \"./components/PhotoGrid\";\nimport NetworkStatus from \"./components/NetworkStatus\";\nimport { photoService } from \"./services/PhotoService\";\nimport { checkAllPermissions, displayPermissionsInfo, isHTTPS } from \"./utils/permissions\";\n\nfunction App() {\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  const loadPhotos = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const savedPhotos = await photoService.getAllPhotos();\n      setPhotos(savedPhotos);\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографий:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const retryPendingUploads = useCallback(async () => {\n    try {\n      // Получаем актуальные фотографии из базы данных вместо state\n      const allPhotos = await photoService.getAllPhotos();\n      const pendingPhotos = allPhotos.filter(\n        (photo) => photo.status === \"pending\"\n      );\n\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  }, [loadPhotos]);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    loadPhotos();\n  }, [loadPhotos]);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, retryPendingUploads]);\n\n  const handlePhotoUpload = async (file) => {\n    try {\n      const photoData = {\n        id: Date.now().toString() + Math.random().toString(36).substr(2, 9), // Более уникальный ID\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n      };\n\n      // Сохраняем в IndexedDB\n      await photoService.savePhoto(photoData);\n\n      // Обновляем состояние\n      setPhotos((prev) => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        try {\n          await photoService.uploadPhoto(photoData);\n          await loadPhotos(); // Обновляем статус\n        } catch (uploadError) {\n          console.error(\"Ошибка загрузки на сервер:\", uploadError);\n          // Не блокируем интерфейс, просто логируем ошибку\n          await loadPhotos(); // Обновляем статус с ошибкой\n        }\n      }\n    } catch (error) {\n      console.error(\"Ошибка загрузки фотографии:\", error);\n    }\n  };\n\n  const handleRetryUpload = async (photoId) => {\n    try {\n      const photo = photos.find((p) => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error(\"Ошибка повторной отправки:\", error);\n    }\n  };\n\n  const handleDeletePhoto = async (photoId) => {\n    try {\n      await photoService.deletePhoto(photoId);\n      // Обновляем состояние, удаляя фотографию из списка\n      setPhotos((prev) => prev.filter((photo) => photo.id !== photoId));\n    } catch (error) {\n      console.error(\"Ошибка удаления фотографии:\", error);\n      alert(\"Не удалось удалить фотографию. Попробуйте еще раз.\");\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container\">\n        <div className=\"loading\">Загрузка фотографий...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <h1>📸 Photo Upload PWA</h1>\n        <NetworkStatus isOnline={isOnline} />\n      </header>\n\n      <PhotoUploader onPhotoUpload={handlePhotoUpload} />\n\n      <PhotoGrid\n        photos={photos}\n        onRetryUpload={handleRetryUpload}\n        onDeletePhoto={handleDeletePhoto}\n        isOnline={isOnline}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}