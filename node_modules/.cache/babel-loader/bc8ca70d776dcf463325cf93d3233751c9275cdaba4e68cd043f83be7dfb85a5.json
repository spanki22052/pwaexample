{"ast":null,"code":"var _jsxFileName = \"/Users/tigrotigro/Projects/Hakaton/PWA example/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PhotoUploader from './components/PhotoUploader';\nimport PhotoGrid from './components/PhotoGrid';\nimport NetworkStatus from './components/NetworkStatus';\nimport { photoService } from './services/PhotoService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    loadPhotos();\n  }, []);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, photos]);\n  const loadPhotos = async () => {\n    try {\n      setIsLoading(true);\n      const savedPhotos = await photoService.getAllPhotos();\n      setPhotos(savedPhotos);\n    } catch (error) {\n      console.error('Ошибка загрузки фотографий:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const retryPendingUploads = async () => {\n    try {\n      const pendingPhotos = photos.filter(photo => photo.status === 'pending');\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error('Ошибка повторной отправки:', error);\n    }\n  };\n  const handlePhotoUpload = async file => {\n    try {\n      const photoData = {\n        id: Date.now().toString(),\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: 'pending',\n        createdAt: new Date().toISOString()\n      };\n\n      // Сохраняем в IndexedDB\n      await PhotoService.savePhoto(photoData);\n\n      // Обновляем состояние\n      setPhotos(prev => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        await PhotoService.uploadPhoto(photoData);\n        await loadPhotos(); // Обновляем статус\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки фотографии:', error);\n    }\n  };\n  const handleRetryUpload = async photoId => {\n    try {\n      const photo = photos.find(p => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error('Ошибка повторной отправки:', error);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0444\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u0439...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDCF8 Photo Upload PWA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NetworkStatus, {\n        isOnline: isOnline\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoUploader, {\n      onPhotoUpload: handlePhotoUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PhotoGrid, {\n      photos: photos,\n      onRetryUpload: handleRetryUpload,\n      isOnline: isOnline\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+hM8fz+oyFFhl7S6ghg3Q+j7AH0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","PhotoUploader","PhotoGrid","NetworkStatus","photoService","jsxDEV","_jsxDEV","App","_s","photos","setPhotos","isOnline","setIsOnline","navigator","onLine","isLoading","setIsLoading","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadPhotos","retryPendingUploads","savedPhotos","getAllPhotos","error","console","pendingPhotos","filter","photo","status","uploadPhoto","handlePhotoUpload","file","photoData","id","Date","now","toString","name","size","createdAt","toISOString","PhotoService","savePhoto","prev","handleRetryUpload","photoId","find","p","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPhotoUpload","onRetryUpload","_c","$RefreshReg$"],"sources":["/Users/tigrotigro/Projects/Hakaton/PWA example/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PhotoUploader from './components/PhotoUploader';\nimport PhotoGrid from './components/PhotoGrid';\nimport NetworkStatus from './components/NetworkStatus';\nimport { photoService } from './services/PhotoService';\n\nfunction App() {\n  const [photos, setPhotos] = useState([]);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Проверка статуса сети\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Загрузка фотографий при инициализации\n  useEffect(() => {\n    loadPhotos();\n  }, []);\n\n  // Попытка отправить отложенные фотографии при восстановлении сети\n  useEffect(() => {\n    if (isOnline) {\n      retryPendingUploads();\n    }\n  }, [isOnline, photos]);\n\n  const loadPhotos = async () => {\n    try {\n      setIsLoading(true);\n      const savedPhotos = await photoService.getAllPhotos();\n      setPhotos(savedPhotos);\n    } catch (error) {\n      console.error('Ошибка загрузки фотографий:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const retryPendingUploads = async () => {\n    try {\n      const pendingPhotos = photos.filter(photo => photo.status === 'pending');\n      for (const photo of pendingPhotos) {\n        await photoService.uploadPhoto(photo);\n      }\n      // Перезагружаем список фотографий\n      await loadPhotos();\n    } catch (error) {\n      console.error('Ошибка повторной отправки:', error);\n    }\n  };\n\n  const handlePhotoUpload = async (file) => {\n    try {\n      const photoData = {\n        id: Date.now().toString(),\n        file: file,\n        name: file.name,\n        size: file.size,\n        status: 'pending',\n        createdAt: new Date().toISOString()\n      };\n\n      // Сохраняем в IndexedDB\n      await PhotoService.savePhoto(photoData);\n      \n      // Обновляем состояние\n      setPhotos(prev => [...prev, photoData]);\n\n      // Пытаемся отправить, если есть интернет\n      if (isOnline) {\n        await PhotoService.uploadPhoto(photoData);\n        await loadPhotos(); // Обновляем статус\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки фотографии:', error);\n    }\n  };\n\n  const handleRetryUpload = async (photoId) => {\n    try {\n      const photo = photos.find(p => p.id === photoId);\n      if (photo) {\n        await photoService.uploadPhoto(photo);\n        await loadPhotos();\n      }\n    } catch (error) {\n      console.error('Ошибка повторной отправки:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container\">\n        <div className=\"loading\">Загрузка фотографий...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <header className=\"header\">\n        <h1>📸 Photo Upload PWA</h1>\n        <NetworkStatus isOnline={isOnline} />\n      </header>\n\n      <PhotoUploader onPhotoUpload={handlePhotoUpload} />\n\n      <PhotoGrid \n        photos={photos} \n        onRetryUpload={handleRetryUpload}\n        isOnline={isOnline}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}