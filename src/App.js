import React, { useState, useEffect, useCallback } from "react";
import PhotoUploader from "./components/PhotoUploader";
import PhotoGrid from "./components/PhotoGrid";
import NetworkStatus from "./components/NetworkStatus";
import { photoService } from "./services/PhotoService";
import {
  checkAllPermissions,
  displayPermissionsInfo,
  isHTTPS,
} from "./utils/permissions";

function App() {
  const [photos, setPhotos] = useState([]);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isLoading, setIsLoading] = useState(true);
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncInfo, setSyncInfo] = useState(null);
  const [localDataStats, setLocalDataStats] = useState({ count: 0, sizeKB: 0 });
  const [isUploading, setIsUploading] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  const calculateLocalDataStats = useCallback(async () => {
    try {
      const stats = await photoService.getLocalDataStats();
      setLocalDataStats(stats);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      setLocalDataStats({ count: 0, sizeKB: 0 });
    }
  }, []);

  const loadPhotos = useCallback(
    async (withSync = false) => {
      try {
        setIsLoading(true);
        if (withSync) setIsSyncing(true);

        let savedPhotos;

        if (withSync) {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º
          savedPhotos = await photoService.getAllPhotosWithSync();
          console.log("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
        } else {
          // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
          savedPhotos = await photoService.getAllPhotos();
        }

        setPhotos(savedPhotos);
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${savedPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await calculateLocalDataStats();
        await photoService.syncWithServer();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error);
      } finally {
        setIsLoading(false);
        setIsSyncing(false);
      }
    },
    [calculateLocalDataStats]
  );

  const retryPendingUploads = useCallback(async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ state
      const allPhotos = await photoService.getAllPhotos();
      const pendingPhotos = allPhotos.filter(
        (photo) => photo.status === "pending"
      );

      let uploadedCount = 0;
      for (const photo of pendingPhotos) {
        try {
          await photoService.uploadPhoto(photo);
          uploadedCount++;
        } catch (uploadError) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ${photo.name}:`, uploadError);
        }
      }

      // –ï—Å–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–æ—Ç–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      if (uploadedCount > 0) {
        console.log(
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadedCount} —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...`
        );
        await photoService.syncWithServer();
        console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      await loadPhotos();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  }, [loadPhotos]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    loadPhotos(true);
    console.log("initi");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const checkPermissions = async () => {
      try {
        const permissions = await checkAllPermissions();
        displayPermissionsInfo(permissions);

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ HTTPS (–∫—Ä–æ–º–µ localhost)
        if (!isHTTPS() && window.location.hostname !== "localhost") {
          console.warn(
            "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTP. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º HTTPS."
          );
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:", error);
      }
    };

    checkPermissions();
  }, [loadPhotos]);

  // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
  useEffect(() => {
    if (isOnline) {
      retryPendingUploads();
    }
  }, [isOnline, retryPendingUploads]);

  const handlePhotoUpload = async (file) => {
    try {
      const photoData = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9), // –ë–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        file: file,
        name: file.name,
        size: file.size,
        status: "pending",
        createdAt: new Date().toISOString(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
      await photoService.savePhoto(photoData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setPhotos((prev) => [...prev, photoData]);

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      if (isOnline) {
        try {
          setIsUploading(true);
          setSyncInfo("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");

          await photoService.uploadPhoto(photoData);
          console.log(
            "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é..."
          );

          setSyncInfo("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          await photoService.syncWithServer();
          console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

          setSyncInfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...");

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          await loadPhotos(true);

          setSyncInfo("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!");
          setTimeout(() => setSyncInfo(null), 2000);
        } catch (uploadError) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", uploadError);
          setSyncInfo("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
          setTimeout(() => setSyncInfo(null), 3000);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          await loadPhotos(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
        } finally {
          setIsUploading(false);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);
    }
  };

  const handleRetryUpload = async (photoId) => {
    try {
      const photo = photos.find((p) => p.id === photoId);
      if (photo) {
        await photoService.uploadPhoto(photo);
        console.log("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await photoService.syncWithServer();
        console.log("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

        await loadPhotos();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  };

  const handleDeletePhoto = async (photoId) => {
    try {
      await photoService.deletePhoto(photoId);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–¥–∞–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
      setPhotos((prev) => prev.filter((photo) => photo.id !== photoId));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  if (isLoading) {
    return (
      <div className="container">
        <div className="loading">
          {isSyncing
            ? "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."
            : isUploading
            ? "üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä..."
            : "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π..."}
        </div>
      </div>
    );
  }

  const handleSyncWithServer = async () => {
    try {
      setSyncInfo("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
      await loadPhotos(true);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const serverPhotos = photos.filter((photo) => photo.isFromServer);
      const localPhotos = photos.filter((photo) => !photo.isFromServer);

      setSyncInfo(
        `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${serverPhotos.length} —Å —Å–µ—Ä–≤–µ—Ä–∞ + ${localPhotos.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö`
      );

      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setSyncInfo(null), 3000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
      setSyncInfo("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
      setTimeout(() => setSyncInfo(null), 3000);
    }
  };

  const handleCleanupDuplicates = async () => {
    try {
      setSyncInfo("–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...");
      setIsSyncing(true);

      const cleanedCount = await photoService.cleanupDuplicatePhotos();

      if (cleanedCount > 0) {
        setSyncInfo(`–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${cleanedCount}`);
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        await loadPhotos();
      } else {
        setSyncInfo("–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }

      setTimeout(() => setSyncInfo(null), 3000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", error);
      setSyncInfo("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏");
      setTimeout(() => setSyncInfo(null), 3000);
    } finally {
      setIsSyncing(false);
    }
  };

  const handleCleanupLocalData = async () => {
    try {
      setSyncInfo("–û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
      setIsSyncing(true);

      const result = await photoService.cleanupAllUploadedLocalData();

      if (result.cleanedCount > 0) {
        setSyncInfo(
          `–û—á–∏—â–µ–Ω–æ ${result.cleanedCount} —Ñ–æ—Ç–æ (${result.totalSizeKB} KB)`
        );
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        await loadPhotos();
      } else {
        setSyncInfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏");
      }

      setTimeout(() => setSyncInfo(null), 4000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error);
      setSyncInfo("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏");
      setTimeout(() => setSyncInfo(null), 3000);
    } finally {
      setIsSyncing(false);
    }
  };

  return (
    <div className="container">
      <header className="header">
        <h1>üì∏ Photo Upload PWA</h1>
        <div
          style={{
            display: "flex",
            alignItems: "center",
            gap: "10px",
            flexWrap: "wrap",
          }}
        >
          <NetworkStatus isOnline={isOnline} />
          {isOnline && (
            <>
              <button
                onClick={handleSyncWithServer}
                disabled={isSyncing}
                style={{
                  background: isSyncing ? "#6c757d" : "#007bff",
                  color: "white",
                  border: "none",
                  padding: "6px 12px",
                  borderRadius: "4px",
                  fontSize: "12px",
                  cursor: isSyncing ? "not-allowed" : "pointer",
                }}
              >
                {isSyncing ? "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è..." : "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"}
              </button>
              <button
                onClick={handleCleanupLocalData}
                disabled={isSyncing}
                title="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
                style={{
                  background: isSyncing ? "#6c757d" : "#28a745",
                  color: "white",
                  border: "none",
                  padding: "6px 12px",
                  borderRadius: "4px",
                  fontSize: "12px",
                  cursor: isSyncing ? "not-allowed" : "pointer",
                }}
              >
                üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ
              </button>
              <button
                onClick={handleCleanupDuplicates}
                disabled={isSyncing}
                title="–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
                style={{
                  background: isSyncing ? "#6c757d" : "#dc3545",
                  color: "white",
                  border: "none",
                  padding: "6px 12px",
                  borderRadius: "4px",
                  fontSize: "12px",
                  cursor: isSyncing ? "not-allowed" : "pointer",
                }}
              >
                üóëÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã
              </button>
            </>
          )}
          <div
            style={{
              fontSize: "12px",
              color: "#666",
              background: "#f8f9fa",
              padding: "4px 8px",
              borderRadius: "4px",
              display: "flex",
              flexDirection: "column",
              gap: "2px",
            }}
          >
            <div>
              üìä –í—Å–µ–≥–æ: {photos.length} | üåê –°–µ—Ä–≤–µ—Ä:{" "}
              {photos.filter((p) => p.isFromServer).length} | üì± –õ–æ–∫–∞–ª—å–Ω—ã–µ:{" "}
              {photos.filter((p) => !p.isFromServer).length}
            </div>
            {localDataStats.count > 0 && (
              <div style={{ fontSize: "11px", color: "#888" }}>
                üíæ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {localDataStats.count} —Ñ–æ—Ç–æ (
                {localDataStats.sizeKB} KB)
              </div>
            )}
          </div>
        </div>
      </header>

      {syncInfo && (
        <div
          style={{
            background: "#e3f2fd",
            border: "1px solid #2196f3",
            borderRadius: "6px",
            padding: "12px",
            margin: "10px 0",
            fontSize: "14px",
            color: "#1976d2",
            textAlign: "center",
          }}
        >
          ‚ÑπÔ∏è {syncInfo}
        </div>
      )}

      <PhotoUploader onPhotoUpload={handlePhotoUpload} />

      <PhotoGrid
        photos={photos}
        onRetryUpload={handleRetryUpload}
        onDeletePhoto={handleDeletePhoto}
        isOnline={isOnline}
      />
    </div>
  );
}

export default App;
