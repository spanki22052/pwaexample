import React, { useState, useEffect, useCallback } from "react";
import PhotoUploader from "./components/PhotoUploader";
import PhotoGrid from "./components/PhotoGrid";
import NetworkStatus from "./components/NetworkStatus";
import { photoService } from "./services/PhotoService";
import {
  checkAllPermissions,
  displayPermissionsInfo,
  isHTTPS,
} from "./utils/permissions";

function App() {
  const [photos, setPhotos] = useState([]);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isLoading, setIsLoading] = useState(true);
  const [isSyncing, setIsSyncing] = useState(false);
  const [syncInfo, setSyncInfo] = useState(null);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  const loadPhotos = useCallback(async (withSync = false) => {
    try {
      setIsLoading(true);
      if (withSync) setIsSyncing(true);

      let savedPhotos;

      if (withSync) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        savedPhotos = await photoService.getAllPhotosWithSync();
        console.log("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      } else {
        // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        savedPhotos = await photoService.getAllPhotos();
      }

      setPhotos(savedPhotos);
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${savedPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error);
    } finally {
      setIsLoading(false);
      setIsSyncing(false);
    }
  }, []);

  const retryPendingUploads = useCallback(async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ state
      const allPhotos = await photoService.getAllPhotos();
      const pendingPhotos = allPhotos.filter(
        (photo) => photo.status === "pending"
      );

      for (const photo of pendingPhotos) {
        await photoService.uploadPhoto(photo);
      }
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      await loadPhotos();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  }, [loadPhotos]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    loadPhotos(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const checkPermissions = async () => {
      try {
        const permissions = await checkAllPermissions();
        displayPermissionsInfo(permissions);

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ HTTPS (–∫—Ä–æ–º–µ localhost)
        if (!isHTTPS() && window.location.hostname !== "localhost") {
          console.warn(
            "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTP. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º HTTPS."
          );
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:", error);
      }
    };

    checkPermissions();
  }, [loadPhotos]);

  // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
  useEffect(() => {
    if (isOnline) {
      retryPendingUploads();
    }
  }, [isOnline, retryPendingUploads]);

  const handlePhotoUpload = async (file) => {
    try {
      const photoData = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9), // –ë–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        file: file,
        name: file.name,
        size: file.size,
        status: "pending",
        createdAt: new Date().toISOString(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
      await photoService.savePhoto(photoData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setPhotos((prev) => [...prev, photoData]);

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      if (isOnline) {
        try {
          await photoService.uploadPhoto(photoData);
          await loadPhotos(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        } catch (uploadError) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", uploadError);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          await loadPhotos(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);
    }
  };

  const handleRetryUpload = async (photoId) => {
    try {
      const photo = photos.find((p) => p.id === photoId);
      if (photo) {
        await photoService.uploadPhoto(photo);
        await loadPhotos();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  };

  const handleDeletePhoto = async (photoId) => {
    try {
      await photoService.deletePhoto(photoId);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–¥–∞–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
      setPhotos((prev) => prev.filter((photo) => photo.id !== photoId));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  if (isLoading) {
    return (
      <div className="container">
        <div className="loading">
          {isSyncing
            ? "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."
            : "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π..."}
        </div>
      </div>
    );
  }

  const handleSyncWithServer = async () => {
    try {
      setSyncInfo("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
      await loadPhotos(true);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const serverPhotos = photos.filter((photo) => photo.isFromServer);
      const localPhotos = photos.filter((photo) => !photo.isFromServer);

      setSyncInfo(
        `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${serverPhotos.length} —Å —Å–µ—Ä–≤–µ—Ä–∞ + ${localPhotos.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö`
      );

      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setSyncInfo(null), 3000);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
      setSyncInfo("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
      setTimeout(() => setSyncInfo(null), 3000);
    }
  };

  return (
    <div className="container">
      <header className="header">
        <h1>üì∏ Photo Upload PWA</h1>
        <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
          <NetworkStatus isOnline={isOnline} />
          {isOnline && (
            <button
              onClick={handleSyncWithServer}
              disabled={isSyncing}
              style={{
                background: isSyncing ? "#6c757d" : "#007bff",
                color: "white",
                border: "none",
                padding: "6px 12px",
                borderRadius: "4px",
                fontSize: "12px",
                cursor: isSyncing ? "not-allowed" : "pointer",
              }}
            >
              {isSyncing ? "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è..." : "üîÑ —Å–µ–∫—Å –ø–æ–Ω"}
            </button>
          )}
          <div
            style={{
              fontSize: "12px",
              color: "#666",
              background: "#f8f9fa",
              padding: "4px 8px",
              borderRadius: "4px",
            }}
          >
            üìä –í—Å–µ–≥–æ: {photos.length} | üåê –°–µ—Ä–≤–µ—Ä:{" "}
            {photos.filter((p) => p.isFromServer).length} | üì± –õ–æ–∫–∞–ª—å–Ω—ã–µ:{" "}
            {photos.filter((p) => !p.isFromServer).length}
          </div>
        </div>
      </header>

      {syncInfo && (
        <div
          style={{
            background: "#e3f2fd",
            border: "1px solid #2196f3",
            borderRadius: "6px",
            padding: "12px",
            margin: "10px 0",
            fontSize: "14px",
            color: "#1976d2",
            textAlign: "center",
          }}
        >
          ‚ÑπÔ∏è {syncInfo}
        </div>
      )}

      <PhotoUploader onPhotoUpload={handlePhotoUpload} />

      <PhotoGrid
        photos={photos}
        onRetryUpload={handleRetryUpload}
        onDeletePhoto={handleDeletePhoto}
        isOnline={isOnline}
      />
    </div>
  );
}

export default App;
