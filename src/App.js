import React, { useState, useEffect, useCallback } from "react";
import PhotoUploader from "./components/PhotoUploader";
import PhotoGrid from "./components/PhotoGrid";
import NetworkStatus from "./components/NetworkStatus";
import { photoService } from "./services/PhotoService";
import {
  checkAllPermissions,
  displayPermissionsInfo,
  isHTTPS,
} from "./utils/permissions";

function App() {
  const [photos, setPhotos] = useState([]);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isLoading, setIsLoading] = useState(true);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);

    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  const loadPhotos = useCallback(async () => {
    try {
      setIsLoading(true);
      const savedPhotos = await photoService.getAllPhotos();
      setPhotos(savedPhotos);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  const retryPendingUploads = useCallback(async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ state
      const allPhotos = await photoService.getAllPhotos();
      const pendingPhotos = allPhotos.filter(
        (photo) => photo.status === "pending"
      );

      for (const photo of pendingPhotos) {
        await photoService.uploadPhoto(photo);
      }
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      await loadPhotos();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  }, [loadPhotos]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadPhotos();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const checkPermissions = async () => {
      try {
        const permissions = await checkAllPermissions();
        displayPermissionsInfo(permissions);

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ HTTPS (–∫—Ä–æ–º–µ localhost)
        if (!isHTTPS() && window.location.hostname !== "localhost") {
          console.warn(
            "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTP. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º HTTPS."
          );
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:", error);
      }
    };

    checkPermissions();
  }, [loadPhotos]);

  // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
  useEffect(() => {
    if (isOnline) {
      retryPendingUploads();
    }
  }, [isOnline, retryPendingUploads]);

  const handlePhotoUpload = async (file) => {
    try {
      const photoData = {
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9), // –ë–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        file: file,
        name: file.name,
        size: file.size,
        status: "pending",
        createdAt: new Date().toISOString(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
      await photoService.savePhoto(photoData);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setPhotos((prev) => [...prev, photoData]);

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      if (isOnline) {
        try {
          await photoService.uploadPhoto(photoData);
          await loadPhotos(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        } catch (uploadError) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", uploadError);
          // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          await loadPhotos(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—à–∏–±–∫–æ–π
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);
    }
  };

  const handleRetryUpload = async (photoId) => {
    try {
      const photo = photos.find((p) => p.id === photoId);
      if (photo) {
        await photoService.uploadPhoto(photo);
        await loadPhotos();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    }
  };

  const handleDeletePhoto = async (photoId) => {
    try {
      await photoService.deletePhoto(photoId);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —É–¥–∞–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
      setPhotos((prev) => prev.filter((photo) => photo.id !== photoId));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  if (isLoading) {
    return (
      <div className="container">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...</div>
      </div>
    );
  }

  return (
    <div className="container">
      <header className="header">
        <h1>üì∏ Photo Upload PWA</h1>
        <NetworkStatus isOnline={isOnline} />
      </header>

      <PhotoUploader onPhotoUpload={handlePhotoUpload} />

      <PhotoGrid
        photos={photos}
        onRetryUpload={handleRetryUpload}
        onDeletePhoto={handleDeletePhoto}
        isOnline={isOnline}
      />
    </div>
  );
}

export default App;
