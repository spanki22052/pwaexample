// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ PWA

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Permissions API
 */
export const isPermissionsAPISupported = () => {
  return "permissions" in navigator;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É getUserMedia (–∫–∞–º–µ—Ä–∞/–º–∏–∫—Ä–æ—Ñ–æ–Ω)
 */
export const isGetUserMediaSupported = () => {
  return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 * @param {string} permission - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ('camera', 'microphone', 'notifications', etc.)
 * @returns {Promise<string>} - 'granted', 'denied', 'prompt', –∏–ª–∏ 'unsupported'
 */
export const checkPermission = async (permission) => {
  if (!isPermissionsAPISupported()) {
    console.log("Permissions API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    return "unsupported";
  }

  try {
    const result = await navigator.permissions.query({ name: permission });
    return result.state;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ${permission}:`, error);
    return "unsupported";
  }
};

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
 * @param {Object} constraints - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–∞–º–µ—Ä—ã
 * @returns {Promise<Object>} - { success: boolean, stream?: MediaStream, error?: string }
 */
export const requestCameraAccess = async (constraints = {}) => {
  if (!isGetUserMediaSupported()) {
    return {
      success: false,
      error: "getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ",
    };
  }

  const defaultConstraints = {
    video: {
      facingMode: "environment", // –ó–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      width: { ideal: 1280 },
      height: { ideal: 720 },
    },
    audio: false,
  };

  const finalConstraints = { ...defaultConstraints, ...constraints };

  try {
    const stream = await navigator.mediaDevices.getUserMedia(finalConstraints);
    return {
      success: true,
      stream: stream,
    };
  } catch (error) {
    let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ";

    switch (error.name) {
      case "NotAllowedError":
        errorMessage =
          "–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.";
        break;
      case "NotFoundError":
        errorMessage = "–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ";
        break;
      case "NotReadableError":
        errorMessage = "–ö–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º";
        break;
      case "OverconstrainedError":
        errorMessage = "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è";
        break;
      case "SecurityError":
        errorMessage =
          "–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS.";
        break;
      case "AbortError":
        errorMessage = "–ó–∞–ø—Ä–æ—Å –∫ –∫–∞–º–µ—Ä–µ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω";
        break;
      default:
        errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ";
        break;
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
};

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @returns {Promise<string>} - 'granted', 'denied', –∏–ª–∏ 'default'
 */
export const requestNotificationPermission = async () => {
  if (!("Notification" in window)) {
    console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è");
    return "unsupported";
  }

  if (Notification.permission === "granted") {
    return "granted";
  }

  if (Notification.permission === "denied") {
    return "denied";
  }

  try {
    const permission = await Notification.requestPermission();
    return permission;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    return "denied";
  }
};

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 * @returns {Promise<boolean>} - true –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export const requestPersistentStorage = async () => {
  if (!("storage" in navigator) || !("persist" in navigator.storage)) {
    console.log("Persistent Storage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    return false;
  }

  try {
    const persistent = await navigator.storage.persist();
    console.log(
      `–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${persistent ? "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ" : "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"}`
    );
    return persistent;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", error);
    return false;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * @returns {Promise<Object>} - { quota: number, usage: number, usageDetails?: Object }
 */
export const getStorageEstimate = async () => {
  if (!("storage" in navigator) || !("estimate" in navigator.storage)) {
    console.log("Storage API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
    return null;
  }

  try {
    const estimate = await navigator.storage.estimate();
    return {
      quota: estimate.quota,
      usage: estimate.usage,
      usageDetails: estimate.usageDetails,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:", error);
    return null;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ HTTPS
 * @returns {boolean}
 */
export const isHTTPS = () => {
  return (
    window.location.protocol === "https:" ||
    window.location.hostname === "localhost"
  );
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è PWA
 * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 */
export const checkAllPermissions = async () => {
  const results = {
    https: isHTTPS(),
    permissionsAPI: isPermissionsAPISupported(),
    getUserMedia: isGetUserMediaSupported(),
    camera: "unknown",
    notifications: Notification.permission,
    persistentStorage: false,
    storageEstimate: null,
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
  if (isPermissionsAPISupported()) {
    try {
      results.camera = await checkPermission("camera");
    } catch (error) {
      results.camera = "unsupported";
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  if ("storage" in navigator && "persisted" in navigator.storage) {
    try {
      results.persistentStorage = await navigator.storage.persisted();
    } catch (error) {
      results.persistentStorage = false;
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  results.storageEstimate = await getStorageEstimate();

  return results;
};

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö
 * @param {Object} permissions - –†–µ–∑—É–ª—å—Ç–∞—Ç checkAllPermissions()
 */
export const displayPermissionsInfo = (permissions) => {
  console.group("üîê –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π PWA");

  console.log(`üì° HTTPS: ${permissions.https ? "‚úÖ" : "‚ùå"}`);
  console.log(
    `üîß Permissions API: ${permissions.permissionsAPI ? "‚úÖ" : "‚ùå"}`
  );
  console.log(`üì∑ getUserMedia: ${permissions.getUserMedia ? "‚úÖ" : "‚ùå"}`);
  console.log(
    `üì∏ –ö–∞–º–µ—Ä–∞: ${getPermissionEmoji(permissions.camera)} ${permissions.camera}`
  );
  console.log(
    `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${getPermissionEmoji(permissions.notifications)} ${
      permissions.notifications
    }`
  );
  console.log(
    `üíæ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${permissions.persistentStorage ? "‚úÖ" : "‚ùå"}`
  );

  if (permissions.storageEstimate) {
    const usedMB = Math.round(permissions.storageEstimate.usage / 1024 / 1024);
    const totalMB = Math.round(permissions.storageEstimate.quota / 1024 / 1024);
    console.log(`üìä –•—Ä–∞–Ω–∏–ª–∏—â–µ: ${usedMB}MB / ${totalMB}MB`);
  }

  console.groupEnd();
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 * @param {string} permission - –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 * @returns {string} - –≠–º–æ–¥–∑–∏
 */
const getPermissionEmoji = (permission) => {
  switch (permission) {
    case "granted":
      return "‚úÖ";
    case "denied":
      return "‚ùå";
    case "prompt":
      return "‚ùì";
    case "unsupported":
      return "üö´";
    default:
      return "‚ùì";
  }
};
